<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>noklam</title>
<link>https://noklam.github.io/blog/kedro/index.html</link>
<atom:link href="https://noklam.github.io/blog/kedro/index.xml" rel="self" type="application/rss+xml"/>
<description>My blog about kedro and non-kedro stuff, data science</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Fri, 02 Jul 2021 00:00:00 GMT</lastBuildDate>
<item>
  <title>Advance Kedro Series - Digging into Dataset Memory Management and CacheDataSet</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/kedro/posts/2021-07-02-kedro-datacatalog.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>Today I am gonna explain some <code>kedro</code> internals to understnad how kedor manage your dataset. If you always write imperative python code, you may find that writing <code>nodes</code> and <code>pipeline</code> is a little bti awkward. They may seems less intuitive, however, it also enable some interesting featrue.</p>
<p>This article assumes you have basic understanding of <code>kedro</code>, I will focus on <code>CacheDataSet</code> and the auto-release dataset feature of kedro pipeline. It is useful to reduce your memory footprint without encountering the infamous <strong>Out of Memory (OOM)</strong> issue.</p>
<p>To start with, we have the default iris dataset. Normally we would do it in a YAML file, but to make things easier in Notebook, I’ll keep everything compact in a notebook.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> kedro</span>
<span id="cb1-2">kedro.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'0.17.4'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> kedro.io <span class="im" style="color: #00769E;">import</span> DataCatalog, MemoryDataSet, CachedDataSet</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">from</span> kedro.extras.datasets.pandas <span class="im" style="color: #00769E;">import</span> CSVDataSet</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> kedro.pipeline <span class="im" style="color: #00769E;">import</span> node, Pipeline</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">from</span> kedro.runner <span class="im" style="color: #00769E;">import</span> SequentialRunner</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Prepare a data catalog</span></span>
<span id="cb3-7">data_catalog <span class="op" style="color: #5E5E5E;">=</span> DataCatalog({<span class="st" style="color: #20794D;">"iris"</span>: CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>)})</span></code></pre></div>
</div>
<p>Next, we have a pipeline follows this execution order: <strong>A -&gt; B -&gt; C</strong></p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> kedro.pipeline <span class="im" style="color: #00769E;">import</span> Pipeline, node</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">def</span> A(df):</span>
<span id="cb4-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Loading the Iris Dataset'</span>)</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step1'</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;">def</span> B(dummy):</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step2'</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;">def</span> C(dummy):</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Step3'</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"></span>
<span id="cb4-18">pipeline <span class="op" style="color: #5E5E5E;">=</span> Pipeline([node(A, <span class="st" style="color: #20794D;">"iris"</span>, <span class="st" style="color: #20794D;">"A"</span>),</span>
<span id="cb4-19">                     node(B, <span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>),</span>
<span id="cb4-20">                     node(C, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"C"</span>),</span>
<span id="cb4-21">                    ])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
</div>
<p>To zoom in to the pipeline, we can use <code>Hook</code> to print out the catalog after every node’s run.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> kedro.framework.hooks <span class="im" style="color: #00769E;">import</span> hook_impl</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">from</span> kedro.framework.hooks <span class="im" style="color: #00769E;">import</span> get_hook_manager</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> pprint <span class="im" style="color: #00769E;">import</span> pprint</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;">def</span> apply_dict(d):</span>
<span id="cb6-6">    new_dict <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> d.items():</span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(v, CachedDataSet):</span>
<span id="cb6-9">            <span class="cf" style="color: #003B4F;">if</span> v._cache.exists():</span>
<span id="cb6-10">                <span class="bu" style="color: null;">print</span>(v._cache._data)</span>
<span id="cb6-11">                new_dict[k] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'In Memory'</span></span>
<span id="cb6-12">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-13">                new_dict[k] <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Cache Deleted'</span></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;">elif</span> v.exists():</span>
<span id="cb6-15">            new_dict[k] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'In Memory'</span></span>
<span id="cb6-16">    <span class="cf" style="color: #003B4F;">return</span> new_dict</span>
<span id="cb6-17"></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="kw" style="color: #003B4F;">class</span> DebugHook:</span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;">"""A hook class for creating a post mortem debugging with the PDB debugger</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;">    whenever an error is triggered within a pipeline. The local scope from when the</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;">    exception occured is available within this debugging session.</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb6-24">    <span class="at" style="color: #657422;">@hook_impl</span></span>
<span id="cb6-25">    <span class="kw" style="color: #003B4F;">def</span> after_node_run(<span class="va" style="color: #111111;">self</span>, node, catalog):</span>
<span id="cb6-26">        <span class="co" style="color: #5E5E5E;"># adding extra behaviour to a single node</span></span>
<span id="cb6-27">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Finish node </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb6-28">        pprint(<span class="ss" style="color: #20794D;">f"Print Catalog </span><span class="sc" style="color: #5E5E5E;">{</span>apply_dict(catalog._data_sets)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;">#         pprint(f"Print Catalog {apply_dict2(lambda x:x.exists(), catalog._data_sets)}")</span></span>
<span id="cb6-30">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*****************************"</span>)</span>
<span id="cb6-31">        </span>
<span id="cb6-32">hook_manager <span class="op" style="color: #5E5E5E;">=</span> get_hook_manager()</span>
<span id="cb6-33">debug_hook <span class="op" style="color: #5E5E5E;">=</span> hook_manager.register(DebugHook())<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>This hook will print out dataset that exist in data catalog. It is a bit tricky because <code>kedro</code> did not delete the dataset, it marked the underlying data as <code>_EMPTY</code> object instead.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Create a runner to run the pipeline</span></span>
<span id="cb7-2">runner <span class="op" style="color: #5E5E5E;">=</span> SequentialRunner()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Run the pipeline</span></span>
<span id="cb7-5">runner.run(pipeline, data_catalog)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
"Print Catalog {'iris': 'In Memory'}"
*****************************
Finish node B([A]) -&gt; [B]
"Print Catalog {'iris': 'In Memory', 'A': 'In Memory'}"
*****************************
Finish node C([B]) -&gt; [C]
"Print Catalog {'iris': 'In Memory', 'B': 'In Memory'}"
*****************************</code></pre>
</div>
</div>
<p>Let’s have a look at what happened when a <code>SequentialRunner</code> runs a pipeline.</p>
<p>It is interesting to note that <code>kedro</code> takes a similar approach to <code>Python</code>, it uses <code>reference counting</code> to control the dataset life cycle. If you are interested, I have another post to dive into <a href="https://noklam.github.io/blog/python-internal/2021/05/29/Python-Internal-Series-Python-GIL-And-Memory.html">Python Memory Management</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">            <span class="co" style="color: #5E5E5E;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb9-2">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.inputs:</span>
<span id="cb9-3">                load_counts[data_set] <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb9-4">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.inputs():</span>
<span id="cb9-5">                    catalog.release(data_set)</span>
<span id="cb9-6">            <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.outputs:</span>
<span id="cb9-7">                <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.outputs():</span>
<span id="cb9-8">                    catalog.release(data_set)</span></code></pre></div>
<section id="cachedataset" class="level1">
<h1>CacheDataSet</h1>
<p>What does <code>release</code> do? It will remove the underlying data if this data is stored in memory.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># In CSVDataSet</span></span>
<span id="cb10-2">https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>quantumblacklabs<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">/</span>blob<span class="op" style="color: #5E5E5E;">/</span>master<span class="op" style="color: #5E5E5E;">/</span>kedro<span class="op" style="color: #5E5E5E;">/</span>extras<span class="op" style="color: #5E5E5E;">/</span>datasets<span class="op" style="color: #5E5E5E;">/</span>pandas<span class="op" style="color: #5E5E5E;">/</span>csv_dataset.py<span class="co" style="color: #5E5E5E;">#L176-L178</span></span>
<span id="cb10-3">```python</span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb10-5">    <span class="bu" style="color: null;">super</span>()._release()</span>
<span id="cb10-6">    <span class="va" style="color: #111111;">self</span>._invalidate_cache()</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># In CacheDataSet</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-3">    <span class="va" style="color: #111111;">self</span>._cache.release()</span>
<span id="cb11-4">    <span class="va" style="color: #111111;">self</span>._dataset.release()</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># In MemoryDataSet</span></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;">def</span> _release(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb12-3">    <span class="va" style="color: #111111;">self</span>._data <span class="op" style="color: #5E5E5E;">=</span> _EMPTY</span></code></pre></div>
<p>First, we can test if it works as expected.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">d <span class="op" style="color: #5E5E5E;">=</span> CachedDataSet(CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>))</span>
<span id="cb13-2">d.load()</span>
<span id="cb13-3">d._cache._data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sepal_length</th>
      <th>sepal_width</th>
      <th>petal_length</th>
      <th>petal_width</th>
      <th>species</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5.1</td>
      <td>3.5</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.9</td>
      <td>3.0</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.7</td>
      <td>3.2</td>
      <td>1.3</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.6</td>
      <td>3.1</td>
      <td>1.5</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5.0</td>
      <td>3.6</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">d.exists()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">d.release()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">d._cache.exists()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>False</code></pre>
</div>
</div>
<p>This is the expected behavior, where the cache should be released. However, it seems not to be the case when I run the pipeline.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">data_catalog <span class="op" style="color: #5E5E5E;">=</span> DataCatalog({<span class="st" style="color: #20794D;">"iris"</span>: CachedDataSet(CSVDataSet(<span class="st" style="color: #20794D;">'data/01_raw/iris.csv'</span>))})</span>
<span id="cb20-2">runner.run(pipeline, data_catalog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory'}"
*****************************
Finish node B([A]) -&gt; [B]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory', 'A': 'In Memory'}"
*****************************
Finish node C([B]) -&gt; [C]
     sepal_length  sepal_width  petal_length  petal_width    species
0             5.1          3.5           1.4          0.2     setosa
1             4.9          3.0           1.4          0.2     setosa
2             4.7          3.2           1.3          0.2     setosa
3             4.6          3.1           1.5          0.2     setosa
4             5.0          3.6           1.4          0.2     setosa
..            ...          ...           ...          ...        ...
145           6.7          3.0           5.2          2.3  virginica
146           6.3          2.5           5.0          1.9  virginica
147           6.5          3.0           5.2          2.0  virginica
148           6.2          3.4           5.4          2.3  virginica
149           5.9          3.0           5.1          1.8  virginica

[150 rows x 5 columns]
"Print Catalog {'iris': 'In Memory', 'B': 'In Memory'}"
*****************************</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'C': 'Step3'}</code></pre>
</div>
</div>
<p>The dataset is persisted throughout the entire pipeline, why? We can monkey patch the <code>SequentialRunner</code> to check why is this happening.</p>
</section>
<section id="a-potential-bug-or-undesired-beahvior" class="level1">
<h1>A potential bug or undesired beahvior?</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> Counter</span>
<span id="cb23-2"><span class="im" style="color: #00769E;">from</span> itertools <span class="im" style="color: #00769E;">import</span> chain</span>
<span id="cb23-3"><span class="im" style="color: #00769E;">from</span> kedro.runner.runner <span class="im" style="color: #00769E;">import</span> AbstractRunner, run_node</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="kw" style="color: #003B4F;">def</span> _run(</span>
<span id="cb23-6">    <span class="va" style="color: #111111;">self</span>, pipeline, catalog, run_id <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb23-7">) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb23-8">    <span class="co" style="color: #5E5E5E;">"""The method implementing sequential pipeline running.</span></span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;">    Args:</span></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;">        pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;">        catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;">        run_id: The id of the run.</span></span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="co" style="color: #5E5E5E;">    Raises:</span></span>
<span id="cb23-16"><span class="co" style="color: #5E5E5E;">        Exception: in case of any downstream node failure.</span></span>
<span id="cb23-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb23-18">    nodes <span class="op" style="color: #5E5E5E;">=</span> pipeline.nodes</span>
<span id="cb23-19">    done_nodes <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>()</span>
<span id="cb23-20"></span>
<span id="cb23-21">    load_counts <span class="op" style="color: #5E5E5E;">=</span> Counter(chain.from_iterable(n.inputs <span class="cf" style="color: #003B4F;">for</span> n <span class="kw" style="color: #003B4F;">in</span> nodes))</span>
<span id="cb23-22"></span>
<span id="cb23-23">    <span class="cf" style="color: #003B4F;">for</span> exec_index, node <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(nodes):</span>
<span id="cb23-24">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb23-25">            run_node(node, catalog, <span class="va" style="color: #111111;">self</span>._is_async, run_id)</span>
<span id="cb23-26">            done_nodes.add(node)</span>
<span id="cb23-27">        <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span>:</span>
<span id="cb23-28">            <span class="va" style="color: #111111;">self</span>._suggest_resume_scenario(pipeline, done_nodes)</span>
<span id="cb23-29">            <span class="cf" style="color: #003B4F;">raise</span></span>
<span id="cb23-30">            </span>
<span id="cb23-31">        <span class="co" style="color: #5E5E5E;"># print load counts for every node run</span></span>
<span id="cb23-32">        pprint(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>load_counts<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb23-33">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"pipeline input: "</span>, pipeline.inputs())</span>
<span id="cb23-34">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"pipeline output: "</span>, pipeline.outputs())</span>
<span id="cb23-35"></span>
<span id="cb23-36">        <span class="co" style="color: #5E5E5E;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb23-37">        <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.inputs:</span>
<span id="cb23-38">            load_counts[data_set] <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb23-39">            <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.inputs():</span>
<span id="cb23-40">                catalog.release(data_set)</span>
<span id="cb23-41">        <span class="cf" style="color: #003B4F;">for</span> data_set <span class="kw" style="color: #003B4F;">in</span> node.outputs:</span>
<span id="cb23-42">            <span class="cf" style="color: #003B4F;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> data_set <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> pipeline.outputs():</span>
<span id="cb23-43">                catalog.release(data_set)</span>
<span id="cb23-44"></span>
<span id="cb23-45">        <span class="va" style="color: #111111;">self</span>._logger.info(</span>
<span id="cb23-46">            <span class="st" style="color: #20794D;">"Completed </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> out of </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> tasks"</span>, exec_index <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="bu" style="color: null;">len</span>(nodes)</span>
<span id="cb23-47">        )</span>
<span id="cb23-48">        </span>
<span id="cb23-49">SequentialRunner._run <span class="op" style="color: #5E5E5E;">=</span> _run</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\ipykernel\ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
  and should_run_async(code)</code></pre>
</div>
</div>
<p>Now we re-run the pipeline. Let’s reset the hook to only print related information.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">class</span> PrintHook:</span>
<span id="cb25-2">    <span class="at" style="color: #657422;">@hook_impl</span></span>
<span id="cb25-3">    <span class="kw" style="color: #003B4F;">def</span> after_node_run(<span class="va" style="color: #111111;">self</span>, node, catalog):</span>
<span id="cb25-4">        <span class="co" style="color: #5E5E5E;"># adding extra behaviour to a single node</span></span>
<span id="cb25-5">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Finish node </span><span class="sc" style="color: #5E5E5E;">{</span>node<span class="sc" style="color: #5E5E5E;">.</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb25-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"*****************************"</span>)</span>
<span id="cb25-7">        </span>
<span id="cb25-8"></span>
<span id="cb25-9">hook_manager.set_blocked(debug_hook)<span class="op" style="color: #5E5E5E;">;</span> <span class="co" style="color: #5E5E5E;"># I tried hook_manger.unregister(), but it is not working.</span></span>
<span id="cb25-10">print_hook <span class="op" style="color: #5E5E5E;">=</span> hook_manager.register(PrintHook())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Create a runner to run the pipeline</span></span>
<span id="cb26-2">runner <span class="op" style="color: #5E5E5E;">=</span> SequentialRunner()</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;"># Run the pipeline</span></span>
<span id="cb26-5">runner.run(pipeline, data_catalog)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading the Iris Dataset
Finish node A([iris]) -&gt; [A]
*****************************
"Counter({'iris': 1, 'A': 1, 'B': 1})"
pipeline input:  {'iris'}
pipeline output:  {'C'}
Finish node B([A]) -&gt; [B]
*****************************
"Counter({'A': 1, 'B': 1, 'iris': 0})"
pipeline input:  {'iris'}
pipeline output:  {'C'}
Finish node C([B]) -&gt; [C]
*****************************
"Counter({'B': 1, 'iris': 0, 'A': 0})"
pipeline input:  {'iris'}
pipeline output:  {'C'}</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>So the reason why the iris data is kept becasue it is always in <code>pipeline.inputs()</code>, which I think is not what we wanted.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/kedro/posts/2021-07-02-kedro-datacatalog.html</guid>
  <pubDate>Fri, 02 Jul 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>core</title>
  <link>https://noklam.github.io/blog/kedro/posts/2022-10-11-kedro-debug-runner.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<hr>
<section id="debugrunner" class="level3">
<h3 class="anchored" data-anchor-id="debugrunner">DebugRunner</h3>
<blockquote class="blockquote">
<pre><code> DebugRunner (is_async:bool=False)</code></pre>
</blockquote>
<p><code>SequentialRunner</code> is an <code>AbstractRunner</code> implementation. It can be used to run the <code>Pipeline</code> in a sequential manner using a topological sort of provided nodes.</p>
<hr>
</section>
<section id="debugrunner-1" class="level3">
<h3 class="anchored" data-anchor-id="debugrunner-1">DebugRunner</h3>
<blockquote class="blockquote">
<pre><code> DebugRunner (is_async:bool=False)</code></pre>
</blockquote>
<p><code>SequentialRunner</code> is an <code>AbstractRunner</code> implementation. It can be used to run the <code>Pipeline</code> in a sequential manner using a topological sort of provided nodes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># `DebugRunner` has to be used in a different way since `session.run` don't support additional argument, so we are going to use a lower level approach and construct `Runner` and `Pipeline` and `DataCatalog` ourselves.</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Testing Kedro Project: https://github.com/noklam/kedro_gallery/tree/master/kedro-debug-runner-demo</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The kedro.ipython extension is already loaded. To reload it, use:
  %reload_ext kedro.ipython
[10/06/22 14:45:20] INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:22] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb5-2">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb5-3">run_1 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:24] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb7-2">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb7-3">run_2 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:45:27] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">runner <span class="op" style="color: #5E5E5E;">=</span> DebugRunner()</span>
<span id="cb9-2">default_pipeline <span class="op" style="color: #5E5E5E;">=</span> pipelines[<span class="st" style="color: #20794D;">"__default__"</span>]</span>
<span id="cb9-3">run_3 <span class="op" style="color: #5E5E5E;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"X_train"</span>]) <span class="co" style="color: #5E5E5E;"># Input datasets</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:46:01] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">run_1</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">run_2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'example_iris_data':      sepal_length  sepal_width  petal_length  petal_width    species
 0             5.1          3.5           1.4          0.2     setosa
 1             4.9          3.0           1.4          0.2     setosa
 2             4.7          3.2           1.3          0.2     setosa
 3             4.6          3.1           1.5          0.2     setosa
 4             5.0          3.6           1.4          0.2     setosa
 ..            ...          ...           ...          ...        ...
 145           6.7          3.0           5.2          2.3  virginica
 146           6.3          2.5           5.0          1.9  virginica
 147           6.5          3.0           5.2          2.0  virginica
 148           6.2          3.4           5.4          2.3  virginica
 149           5.9          3.0           5.1          1.8  virginica
 
 [150 rows x 5 columns]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">run_3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'X_train':      sepal_length  sepal_width  petal_length  petal_width
 47            4.6          3.2           1.4          0.2
 3             4.6          3.1           1.5          0.2
 31            5.4          3.4           1.5          0.4
 25            5.0          3.0           1.6          0.2
 15            5.7          4.4           1.5          0.4
 ..            ...          ...           ...          ...
 28            5.2          3.4           1.4          0.2
 78            6.0          2.9           4.5          1.5
 146           6.3          2.5           5.0          1.9
 49            5.0          3.3           1.4          0.2
 94            5.6          2.7           4.2          1.3
 
 [120 rows x 4 columns]}</code></pre>
</div>
</div>
<hr>
</section>
<section id="greedysequentialrunner" class="level3">
<h3 class="anchored" data-anchor-id="greedysequentialrunner">GreedySequentialRunner</h3>
<blockquote class="blockquote">
<pre><code> GreedySequentialRunner (is_async:bool=False)</code></pre>
</blockquote>
<p><code>SequentialRunner</code> is an <code>AbstractRunner</code> implementation. It can be used to run the <code>Pipeline</code> in a sequential manner using a topological sort of provided nodes.</p>
<hr>
</section>
<section id="greedysequentialrunner-1" class="level3">
<h3 class="anchored" data-anchor-id="greedysequentialrunner-1">GreedySequentialRunner</h3>
<blockquote class="blockquote">
<pre><code> GreedySequentialRunner (is_async:bool=False)</code></pre>
</blockquote>
<p><code>SequentialRunner</code> is an <code>AbstractRunner</code> implementation. It can be used to run the <code>Pipeline</code> in a sequential manner using a topological sort of provided nodes.</p>


</section>

 ]]></description>
  <guid>https://noklam.github.io/blog/kedro/posts/2022-10-11-kedro-debug-runner.html</guid>
  <pubDate>Wed, 12 Oct 2022 19:15:31 GMT</pubDate>
</item>
</channel>
</rss>
