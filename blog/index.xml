<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>noklam</title>
<link>https://noklam.github.io/blog/blog/index.html</link>
<atom:link href="https://noklam.github.io/blog/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>My blog about kedro and non-kedro stuff, data science</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 11 Jul 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>EuroPython 2022 - Conference Notes & Summary</title>
  <link>https://noklam.github.io/blog/blog/posts/2022-07-11-europython2022-summary.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/europython_welcome.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">EuroPython2022</figcaption><p></p>
</figure>
</div>
<p>Schedule: https://ep2022.europython.eu/schedule/</p>
<p>Session that I attended: #europython</p>
<ul>
<li>Properties testing with Hypothesis</li>
<li>TDD Development with Pytest</li>
<li>Python Object under the hood</li>
<li>Norvig’s lispy - beautiful and illuminating Python code</li>
<li>Introduction to Apache TVM</li>
<li>From pip to poetry - Python ways of packagin and publishing</li>
<li>Czech Drourght monitoring system - from manual work to global drought monitoring and mahcine learning with Python Protocol in Python</li>
<li>Dance with shadows - stub mock and patch</li>
<li>What Happen when you import a library in Python</li>
<li>Music and code - good presentation</li>
<li>Dodging AI Dystopia</li>
<li>Make CPython Faster - Mark Shannon</li>
<li>Use animated charts to present &amp; share your findings with ipyvizzu</li>
<li>DOCUMENTATION AS SECRET WEAPON</li>
<li>JWST - James Webb Telescope</li>
<li>Jupyter Under the hood architecture</li>
<li>Python thread safety parallelism without GIL</li>
<li>CPython Internals - implementation with a pipe operator</li>
<li>Hydra configuration with experiment</li>
</ul>
<section id="bulletproof-python-property-based-testing-with-hypothesis" class="level2">
<h2 class="anchored" data-anchor-id="bulletproof-python-property-based-testing-with-hypothesis">Bulletproof Python – Property-Based Testing with Hypothesis</h2>
<p>The term <strong>property based testing</strong> isn’t too important. In a nutshell <code>hypothesis</code> is a python library that help you to write (better) tests by modifying your workflow.</p>
<ol type="1">
<li><del>Prepare mock data</del> Provide a specification of data, let <code>hypothesis</code> do the work</li>
<li>Perform some operation</li>
<li>Assert the result with expected value</li>
</ol>
<p>The rationale behind this is</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>** People write code don’t come up with good test. **</p>
</div>
</div>
<p>For example, you can generate integers with <code>hypotesis.strategies.integers</code>, it does something smart under the hood so it’s not just random number but more meaningful test. For example, you usually want to test for zero, negative number, positive number, large number. <code>hypoethsis</code> try to maximize the variety of tests and you just need to give it a specification.</p>
<p>You can also generate more sophisticated data, for example, a tuple of two integers, where the second integer has to be larger than the first one.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="at" style="color: #657422;">@st.composite</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">def</span> list_and_index(draw, elements<span class="op" style="color: #5E5E5E;">=</span>st.integers()):</span>
<span id="cb1-4">&nbsp; &nbsp; first <span class="op" style="color: #5E5E5E;">=</span> draw(elements)</span>
<span id="cb1-5">&nbsp; &nbsp; second <span class="op" style="color: #5E5E5E;">=</span> draw(st.integers(min_value<span class="op" style="color: #5E5E5E;">=</span>first <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-6">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;">return</span> (first, second)</span></code></pre></div>
<p>Think of it as your virtual QA buddy.</p>
</section>
<section id="tdd-development-with-pytest" class="level2">
<h2 class="anchored" data-anchor-id="tdd-development-with-pytest">TDD Development with pytest</h2>
<p>Workflow for TDD 1. Pick one bug/missing feature 2. Write a test that fails 3. Minimal amount of code that pass - (even hard coded!) 4. Refactor</p>
<p>There are good questions asked * In case of you don’t know what’s the expected answer, how do you write test that fails meaningfully?</p>
<p>I jump out of the session because of a call, so not too many comments about this session. In general I like the idea of TDD but struggle to apply the textbook version of TDD as examples are often much simpler than the real application.</p>
<p>Few key points * Tests as specification about your program (What it does and what not) * Understand why you test fail and pass. * Tests are also good source of documentation.</p>
<p>Thinking about test first also force you to think more about the design, you almost start from pseudocode (you function doesn’t even exist!).</p>
</section>
<section id="python-objects-under-the-hood" class="level1">
<h1>Python objects Under the hood</h1>
<p>Covers a lot about Python’s magic method * <code>__init__</code> add <code>__new__</code> * <code>__add__</code> and <code>__radd__</code> * <code>super()</code> * <code>__str__</code> and <code>__repr__</code> * <code>__next__</code> and <code>__iter__</code> * Why <code>__new__</code> is needed? * We need to create immutable object * Object creation start with <code>__new__</code> which create an instance -&gt; <code>__init__</code> to customize the attributes * We need <code>__new__</code> to create a new immutable object * But how’s python actually achieve immutable tuple? Unanswered</p>
<p><a href="https://mail.python.org/pipermail/tutor/2008-April/061426.html">[Tutor] When to use <strong>new</strong> vs.&nbsp;<strong>init</strong> ?</a> &gt; <strong>new</strong> is the first step of instance creation. It’s called first, and is responsible for returning a new instance of your class. In contrast, <strong>init</strong> doesn’t return anything; it’s only responsible for initializing the instance after it’s been created.</p>
</section>
<section id="norvigs-lispy-beautiful-and-illuminating-python-code" class="level1">
<h1>Norvig’s lispy: beautiful and illuminating Python code</h1>
<p>This is an interesting exercise to implement an <code>Lisp</code> interpreter in <code>Python</code>. I am not from CS background so this is brand new to me, and uncover some of the details that how programming language actually works. It involves parsing text into <code>tokens</code> and evaluate them with some grammar which can be represented as AST.</p>
<p>This is the AST for the example <code>(define double (lambda (n) (* n 2)))</code> drawn as a tree <a href="https://github.com/fluentpython/lispy/tree/main/workshops/europython2022">reference</a>:</p>
<pre><code>                              '*'  'n'   2  
                        'n'    └────┼────┘  
                         │          │  
           'lambda'     [ ]        [ ]  
               └─────────┼──────────┘  
                         │  
'define'   'double'     [ ]  
    └─────────┼──────────┘  
              │  
             [ ]  </code></pre>
<p>The speaker also introduce <code>ChainMap</code>, which I am not aware of before.</p>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> ChainMap</span>
<span id="cb3-2">a <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'a'</span>:<span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb3-3">b <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">2</span>}</span>
<span id="cb3-4">c <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'b'</span>: <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">'c'</span>:<span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">chainmap <span class="op" style="color: #5E5E5E;">=</span> ChainMap(a,b,c)</span></code></pre></div>
</div>
<p>A <code>ChainMap</code> stores multiple dictionaries, instead of merging them they are all stored in the object. Take a guess which `chainmap[‘a’], chainmap[‘b’] are?</p>
<div class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">chainmap[<span class="st" style="color: #20794D;">'a'</span>], chainmap[<span class="st" style="color: #20794D;">'b'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="129">
<pre><code>(1, 2)</code></pre>
</div>
</div>
<p>It pretty much behaves like a normal Python dictionary, except that when the same key exists in more than one of the dictionary, the one that is in the front of the argument list has higher priority.</p>
<section id="introduction-to-apache-tvm" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-apache-tvm">Introduction to Apache TVM</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/europython/tvm.svg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Apache TVM</figcaption><p></p>
</figure>
</div>
<ul>
<li>Apache TVM is a framework that try to squeeze extra performance from specialized hardware.</li>
</ul>
<p>In practice, the workflow roughly go like this 1. Trained a model with your favored libraries (PyTorch/Tensorflow etc) 2. Use TVM to compile and tune -&gt; After this you get a compiled module as output 3. Use TVM python API for inference</p>
<p>The performance gains are mainly from hardware architecture that can give better performance, TVM did some architecture search and try to find the optimal one.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Maybe one side benefit of this is it does not need the deep learning pipeline dependecenies since you just need the TVM Python API and the model file for inference.</p>
</div>
</div>
</section>
</section>
<section id="typing.protocol-in-python-available-in-python-3.8" class="level1">
<h1><code>typing.Protocol</code> in Python (Available in Python 3.8+)</h1>
<p>Since the introduction of type hints, it has been a popular python feature and a lot more static analysis tools is added into the Python ecosystem. The most popular static analysis tool in Python is <code>mypy</code>.</p>
<p><code>Protocol</code> is a way of strcutural subtyping, it’s best to understand it with an Example.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">class</span> Dog:</span>
<span id="cb6-2">    ...</span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;">class</span> Cat:</span>
<span id="cb6-4">    ...</span>
<span id="cb6-5">    </span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">def</span> eat_bread(Union[Dog, Cat]):</span>
<span id="cb6-7">    do_somthing()</span></code></pre></div>
<p>Imagine if you are importing the <code>eat_bread</code> function and you want to extend it with a new animal type. There are no way you can do it unless you go into the source code of the library and change the argument.</p>
<p><code>Protocol</code> solve this problem in a way that I think it’s quite similar to <code>traits</code>, which is quite common in languages like <code>Scala</code>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">class</span> EatsBread(Protocol):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;">def</span> eat_bread(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-3">        ...</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">def</span> feed_bread(animal: EatsBread):</span>
<span id="cb7-6">    animal.eat_bread()</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;">class</span> Duck:</span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;">def</span> eat_bread(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-10">        ...</span>
<span id="cb7-11"></span>
<span id="cb7-12">feed_bread(Duck())  <span class="co" style="color: #5E5E5E;"># &lt;-- OK</span></span></code></pre></div>
<p>Python is a dynamic typing language, which is flexible with duck typing. In essence, if something can <code>swim</code> and <code>quack</code>, it’s close enough to be consider as a duck. We only care about what the <code>class</code> can do, not the type of the class. So in this case, <code>Duck</code> has a method of <code>eat_bread</code>, and it maches the <code>Protocol</code> method and the static analysis tool will not have problem with it. As a result, we don’t need to extend the <code>class</code> or add a new class to <code>Union</code> everytime we extend a new class.</p>
</section>
<section id="what-happened-when-you-import-a-python-library" class="level1">
<h1>What Happened when you import a Python Library?</h1>
<p>This is an interesting talk as I recently had a bug that related to this exactly. It was a bug that due to different mechanism of <code>multiprocess</code>, In Windows and some versions of Mac, it used a <code>spawn process</code>, in Linux it is <code>fork process</code>. The main difference is that <code>spawn process</code> will re-import all the Python modules in the new process and cause some issues. In short, it’s not a good idea to have side-effect when importing a library, always put that into a <code>__name__ == __main__</code> block.</p>
<ul>
<li><code>modules</code> are python object -&gt; you can do something like <code>import random; type(random)</code></li>
<li>Whenever you import a module, a module object is created with a name, optionally you can alias it with <code>import module as xyz</code></li>
<li>sys.modules is the Python VM that keep track of the imported library as a <code>dict</code>
<ul>
<li>Since it is a dict, where the key is the name of the module and value as the module object</li>
<li>If the module is imported more than 1 time, the <code>sys.modules</code> is smart enough to skip the import since the key already exist. It will just use the <code>module</code> object instead.</li>
</ul></li>
</ul>
<section id="how-many-modules-imported-in-python-by-default" class="level2">
<h2 class="anchored" data-anchor-id="how-many-modules-imported-in-python-by-default">How many modules imported in Python by default?</h2>
<ul>
<li>Python Shell - 79</li>
<li>IPython - 646!</li>
<li>Jupyter - 1020!!!</li>
</ul>
<p>It’s quite surprising how many libraries are imported by default, and this explains why it takes some time whenever you do <code>ipython</code> on a shell, as the Python Interpreter is busy reading all the files and evalute it.</p>
<p>Some other interesting notes: * Python use a <code>Finder</code> and <code>Loader</code> to import modules * <code>sys.path</code> is the order that Python Interpreter search for modules, and the first match wins (This is important if you have duplicate namespace or if you do namespace package) * Don’t do <code>sys.path.append</code> although you will find this very common if you do a Stackoverflow search, use environment variable <code>PYTHONPATH=some_path</code> instead</p>
</section>
</section>
<section id="make-cpython-faster" class="level1">
<h1>Make CPython Faster</h1>
<p>The talk was delivered by Mark Shannon. The pace of the talk is quite fast and I couldn’t understand the details, but I think it is a good source of food for thought. Some keypoints * Memory access is slow * Dependent memory read is slower - 2 read is 2x slower because it has to be executed in sequence How to make Python 3.11 faster? * Lazy debugging info creation * (Almost) Zero Cost exceptions * In the try-block - push address to stack of the exception handler * with the expense of more memory - performance is improved in general case, but more expensive when exeception is raised</p>
</section>
<section id="jupyter-under-the-hood" class="level1">
<h1>Jupyter Under the hood</h1>
<ul>
<li>ZMQ as the network Protocol</li>
<li>Dealer socker &amp; router Socket</li>
<li>3 types of channels
<ul>
<li>shell</li>
<li>IO pub</li>
<li>STDIN</li>
</ul></li>
</ul>
</section>
<section id="hydra-configuration-for-experiments" class="level1">
<h1>Hydra configuration for experiments</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">`hydra` <span class="kw" style="color: #003B4F;">is</span> a Python Library that support configuration <span class="cf" style="color: #003B4F;">with</span> many advance features, which built on top of `OmegaConf`.</span>
<span id="cb8-2">Features include:</span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;">*</span> `instantiate` <span class="op" style="color: #5E5E5E;">-</span> dependency injection <span class="cf" style="color: #003B4F;">with</span> configuration <span class="op" style="color: #5E5E5E;">-</span> <span class="cf" style="color: #003B4F;">for</span> example you can do a partial instantiate</span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;">*</span> Type checking</span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;">*</span> Tab completion <span class="cf" style="color: #003B4F;">for</span> configuration</span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;">*</span> Multi<span class="op" style="color: #5E5E5E;">-</span>run </span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;">*</span> Supports plugins</span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;">*</span> Split configurations <span class="kw" style="color: #003B4F;">in</span> multiple YAML files</span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;">*</span> The structure of files largely resemble how a Python modules works. i.e. module.sub_module.xxx</span>
<span id="cb8-10">    </span>
<span id="cb8-11"></span>
<span id="cb8-12">Some downsides:</span>
<span id="cb8-13"><span class="op" style="color: #5E5E5E;">*</span> It use Singleton <span class="kw" style="color: #003B4F;">and</span> cause some problem</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>europython</category>
  <guid>https://noklam.github.io/blog/blog/posts/2022-07-11-europython2022-summary.html</guid>
  <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/europython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Testing with Mocking</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2022-05-30-mocking-with-pytest-patch.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="what-is-mocking" class="level1">
<h1>What is Mocking?</h1>
</section>
<section id="pytest-mock" class="level1">
<h1>pytest-mock</h1>
<p>One of the mainstream mocking library is the standard one from <code>unittest</code>, there are also pytest plugin <code>pytest-mock</code> which wraps on <code>unittest</code>.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> test_sum():</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;">assert</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpiih077gv
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.06s ==============================</code></pre>
</div>
</div>
<p>Mocking is important for a few reasons. * You want to have fast unittest (within second) * You don’t want to put loading or have any side-effect to your actual servers/database (e.g.&nbsp;mock writing to a database)</p>
</section>
<section id="mock-and-magicmock" class="level1">
<h1><code>Mock</code> and <code>MagicMock</code></h1>
<p>There are two main mock object you can used with the standard <code>unittest</code> library from <code>unittest.mock</code>.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> unittest.mock <span class="im" style="color: #00769E;">import</span> Mock, MagicMock, patch</span></code></pre></div>
</div>
<section id="mock" class="level2">
<h2 class="anchored" data-anchor-id="mock">Mock</h2>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">mock <span class="op" style="color: #5E5E5E;">=</span> Mock()</span></code></pre></div>
</div>
<p>With the <code>Mock</code> object, you can treat it like a magic object that have any attributes or methods.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mock.super_method(), mock.attribute_that_does_not_exist_at_all</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(&lt;Mock name='mock.super_method()' id='1587554283232'&gt;,
 &lt;Mock name='mock.attribute_that_does_not_exist_at_all' id='1587554282512'&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;">str</span>(mock)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"&lt;Mock id='1587554282848'&gt;"</code></pre>
</div>
</div>
</section>
<section id="magicmock" class="level2">
<h2 class="anchored" data-anchor-id="magicmock">MagicMock</h2>
<p>The “magic” comes from the magic methods of python object, for example, when you add two object together, it is calling the <code>__add__</code> magic method under the hook.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">mock <span class="op" style="color: #5E5E5E;">+</span> mock</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: unsupported operand type(s) for +: 'Mock' and 'Mock'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">magic_mock <span class="op" style="color: #5E5E5E;">=</span> MagicMock()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">magic_mock <span class="op" style="color: #5E5E5E;">+</span> magic_mock</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;MagicMock name='mock.__add__()' id='1587563722784'&gt;</code></pre>
</div>
</div>
<p>With <code>MagicMock</code>, you get these magic methods for free, this is why adding two mock will not throw an error but adding two <code>Mock</code> will result in a <code>TypeError</code></p>
<p>Let say we want to mock the <code>pandas.read_csv</code> function, because we don’t actually want it to read a data, but just return some mock data whenever it is called. It’s easier to explain with an example.</p>
</section>
</section>
<section id="mocking-with-real-library" class="level1">
<h1>Mocking with real library</h1>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb14-4">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>)</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpka9zv6ev
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.09s ==============================</code></pre>
</div>
</div>
<p>In reality, you should get a <code>Dataframe</code> object, but here we mock the return value to return a <code>str</code>, and you can see the test actually pass.</p>
<section id="mocker.patch-with-createtrue" class="level2">
<h2 class="anchored" data-anchor-id="mocker.patch-with-createtrue"><code>mocker.patch</code> with <code>create=True</code></h2>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb16-4">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpzbddlxxg
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py F                                                         [100%]

================================== FAILURES ===================================
________________________________ test_read_csv ________________________________

mocker = &lt;pytest_mock.plugin.MockFixture object at 0x00000171B28B1820&gt;

    def test_read_csv(mocker):  # mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.
&gt;       mocker.patch("pandas.read_special_csv", return_value = "fake_data", create=False)

_ipytesttmp.py:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:193: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:157: in _start_patch
    mocked = p.start()
..\..\..\..\miniconda3\lib\unittest\mock.py:1529: in start
    result = self.__enter__()
..\..\..\..\miniconda3\lib\unittest\mock.py:1393: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;unittest.mock._patch object at 0x00000171B28B10D0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'pandas' from 'c:\\users\\lrcno\\miniconda3\\lib\\site-packages\\pandas\\__init__.py'&gt; does not have the attribute 'read_special_csv'

..\..\..\..\miniconda3\lib\unittest\mock.py:1366: AttributeError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_read_csv - AttributeError: &lt;module 'pandas' from ...
============================== 1 failed in 0.43s ==============================</code></pre>
</div>
</div>
<p>Now we fail the test because <code>pandas.read_special_csv</code> does not exist. However, with <code>create=True</code> you can make the test pass again. Normally you won’t want to do this, but it is an option that available.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb18-4">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;">"some_data"</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmphqbckliw
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.10s ==============================</code></pre>
</div>
</div>
<p>More often, you would want your mock resemble your real object, which means it has the same attributes and method, but it should fails when the method being called isn’t valid. You may specify the <code>return_value</code> with the mock type</p>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb20-2"><span class="im" style="color: #00769E;">from</span> unittest.mock <span class="im" style="color: #00769E;">import</span> Mock</span>
<span id="cb20-3"><span class="im" style="color: #00769E;">import</span> pytest</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;">def</span> test_read_csv_valid_method(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb20-6">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> Mock(pd.DataFrame))</span>
<span id="cb20-7">    df <span class="op" style="color: #5E5E5E;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>)</span>
<span id="cb20-8">    df.mean()  <span class="co" style="color: #5E5E5E;"># A DataFrame method</span></span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="kw" style="color: #003B4F;">def</span> test_read_csv_invalid_method(mocker):  <span class="co" style="color: #5E5E5E;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb20-11">    mocker.patch(<span class="st" style="color: #20794D;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;">=</span> Mock(pd.DataFrame))</span>
<span id="cb20-12">    df <span class="op" style="color: #5E5E5E;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;">"some_data"</span>)</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;">with</span> pytest.raises(<span class="pp" style="color: #AD0000;">Exception</span>):</span>
<span id="cb20-14">        df.not_a_dataframe_method()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- c:\users\lrcno\miniconda3\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpyfiqtkoy
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collecting ... collected 2 items

_ipytesttmp.py::test_read_csv_valid_method PASSED                        [ 50%]
_ipytesttmp.py::test_read_csv_invalid_method PASSED                      [100%]

============================== 2 passed in 0.16s ==============================</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2022-05-30-mocking-with-pytest-patch.html</guid>
  <pubDate>Mon, 30 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to achieve Partial Immutability with Python’s dataclass?</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2022-04-22-python-dataclass-partiala-immutable.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> dataclasses <span class="im" style="color: #00769E;">import</span> dataclass, field, astuple</span></code></pre></div>
</div>
<p>With <code>dataclass</code>, you can set <code>frozen=True</code> to ensure immutablilty.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">class</span> FrozenDataClass:</span>
<span id="cb2-3">    a: <span class="bu" style="color: null;">int</span></span>
<span id="cb2-4">    b: <span class="bu" style="color: null;">int</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">frozen <span class="op" style="color: #5E5E5E;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-7">frozen.c <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: cannot assign to field 'c'</code></pre>
</div>
</div>
<p>Mutating a frozen dataclass is not possible, but what if I need to compose some logic? <code>__post_init__()</code> method is how you can customize logic.</p>
<section id="post_init-assignment" class="level2">
<h2 class="anchored" data-anchor-id="post_init-assignment"><strong>post_init</strong> assignment</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;">@dataclass</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;">class</span> FrozenDataClass:</span>
<span id="cb4-3">    a: <span class="bu" style="color: null;">int</span></span>
<span id="cb4-4">    b: <span class="bu" style="color: null;">int</span></span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;">def</span> __post_init__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-7">        <span class="va" style="color: #111111;">self</span>.c <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.b</span>
<span id="cb4-8">frozen <span class="op" style="color: #5E5E5E;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">frozen.a, frozen.b, frozen.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
<p>Do notice that I removed the <code>frozen=True</code> flag, see what happen if I put it back.</p>
</section>
<section id="what-if-you-just-want-some-of-your-attribute-frozen" class="level1">
<h1>What if you just want some of your attribute frozen?</h1>
<section id="the-good-old-property" class="level2">
<h2 class="anchored" data-anchor-id="the-good-old-property">The good old <code>@property</code>?</h2>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;">@dataclass</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">class</span> PartialFrozenDataClass:</span>
<span id="cb7-3">    a: <span class="bu" style="color: null;">int</span> <span class="co" style="color: #5E5E5E;"># a should be frozen </span></span>
<span id="cb7-4">    b: <span class="bu" style="color: null;">int</span> <span class="co" style="color: #5E5E5E;"># Should be mutable</span></span>
<span id="cb7-5">    </span>
<span id="cb7-6">    <span class="at" style="color: #657422;">@property</span></span>
<span id="cb7-7">    <span class="kw" style="color: #003B4F;">def</span> b(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.b</span>
<span id="cb7-9">    </span>
<span id="cb7-10">p <span class="op" style="color: #5E5E5E;">=</span> PartialFrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: can't set attribute</code></pre>
</div>
</div>
<p>It doesn’t work!</p>
</section>
<section id="post_init-assignment-in-a-frozen-dataclass" class="level2">
<h2 class="anchored" data-anchor-id="post_init-assignment-in-a-frozen-dataclass"><strong>post_init</strong> assignment in a frozen dataclass ✾</h2>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="at" style="color: #657422;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">class</span> FrozenDataClass:</span>
<span id="cb9-3">    a: <span class="bu" style="color: null;">int</span></span>
<span id="cb9-4">    b: <span class="bu" style="color: null;">int</span></span>
<span id="cb9-5">    </span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;">def</span> __post_init__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb9-7">        <span class="va" style="color: #111111;">self</span>.c <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.b</span>
<span id="cb9-8">frozen <span class="op" style="color: #5E5E5E;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: cannot assign to field 'c'</code></pre>
</div>
</div>
<p>It doesn’t work! Because the frozen flag will block any assignment even in the <code>__post_init__</code> method.</p>
</section>
<section id="workaround" class="level2">
<h2 class="anchored" data-anchor-id="workaround">workaround</h2>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="at" style="color: #657422;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;">class</span> FrozenDataClass:</span>
<span id="cb11-3">    a: <span class="bu" style="color: null;">int</span></span>
<span id="cb11-4">    b: <span class="bu" style="color: null;">int</span></span>
<span id="cb11-5">    </span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;">def</span> __post_init__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb11-7">        <span class="bu" style="color: null;">object</span>.<span class="fu" style="color: #4758AB;">__setattr__</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.b)</span>
<span id="cb11-8">        </span>
<span id="cb11-9">frozen <span class="op" style="color: #5E5E5E;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb11-10">frozen.a, frozen.b, frozen.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="at" style="color: #657422;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">class</span> FrozenDataClass:</span>
<span id="cb13-3">    a: <span class="bu" style="color: null;">int</span></span>
<span id="cb13-4">    b: <span class="bu" style="color: null;">int</span></span>
<span id="cb13-5">    </span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;">def</span> __post_init__(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb13-7">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__setattr__</span>(<span class="st" style="color: #20794D;">'c'</span>, <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.b)</span>
<span id="cb13-8">        </span>
<span id="cb13-9">frozen <span class="op" style="color: #5E5E5E;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb13-10">frozen.a, frozen.b, frozen.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">frozen.c <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: cannot assign to field 'c'</code></pre>
</div>
</div>
<p>It works as expected, the workaround here is using <code>object.__setattr__</code>. The way <code>dataclass</code> achieve immutability is by blocking assignment in the <code>__setattr__</code> method. This trick works because we are using the <code>object</code> class method instead of the <code>cls</code> method, thus it won’t stop us assign new attribute. More details can be found in <a href="https://docs.python.org/3/library/dataclasses.html">Python Standard Doc</a>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>You can’t really use the normal <code>@property</code> trick either. The post-init assignment in a frozen dataclass is the only workaround. However, with <code>object.__setattr__</code> it confuses the IDE and it doesn’t understand it is actually an member of the class which is kind of annoying.</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2022-04-22-python-dataclass-partiala-immutable.html</guid>
  <pubDate>Fri, 22 Apr 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Journey of understanding Python and programming language</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</link>
  <description><![CDATA[ 



<p>To be written… # What is Python Interpreter?</p>
<section id="what-is-bytecode" class="level1">
<h1>What is Bytecode?</h1>
</section>
<section id="python-virtual-machine" class="level1">
<h1>Python Virtual Machine</h1>
</section>
<section id="compiler" class="level1">
<h1>Compiler</h1>
</section>
<section id="ebnf-grammar" class="level1">
<h1>EBNF Grammar</h1>
</section>
<section id="llvm" class="level1">
<h1>LLVM</h1>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</guid>
  <pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What can we learn from Shipping Crisis as a Data Scientist?</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-11-18-what-can-we-learn-from-shipping-crisis-as-a-data-scientist.html</link>
  <description><![CDATA[ 



<p>Even if you are not working in shipping industry, you probably heard about shipping cost is skyrocking for the last year. COVID is clearly the initial disruption, but the story does not end there. Recently, <a href="https://www.wsj.com/video/series/on-the-news/what-america-supply-chain-backlog-looks-like-up-close/388D6F02-5BCD-43AD-A3EE-B945F7373983">Long Beach’s port congestion is at a historcial scale</a>, there are now more than 70+ ships waiting outside the port, the typical number is 1 or 2.</p>
<p>You may think the terminal must be busy as hell, so did I, but it is actualy far from the truth. <a href="https://twitter.com/typesfast/status/1451543776992845834?s=20">In fact, the port is actually paralyzed</a>. The reason surprised me a lot, it is not because of lacking of driver or empty containers, but yard space. Container are being unloaded from ships, then they are being put at the container yard before they go into depot or being stuffed again.</p>
<p>On a high level, it is caused by a negative feedback loop which COVID probably contributed a lot, as it caused a lot of disruption to the supply chain.</p>
<ol type="1">
<li>Port Congestion -&gt; Containers pilled up at container yard since it is waiting to be loaded on ship</li>
<li>Container yard space is taken up by cotnainers, less space is available</li>
<li>A container need to be put on a chassis before it is loaded, but as the container yard is full, empty containers stuck on the chassis and they need to be unloaded before you put a stuffed container.</li>
<li>Less Chassis is available to load stuff, so it further slow down the process</li>
<li>The loop complete and it starts from 1 again</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/2021-11-18-23-37-38.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Port Congestion Feedback Loop</figcaption><p></p>
</figure>
</div>
<p>This is a simplified story, you can find more details from this <a href="https://twitter.com/typesfast/status/1451543776992845834?s=20">twitter thread from flexport’s CEO Ryan</a>. There are more constraints that making this load/unload process inefficient, so the whole process is jammed. Think about a restaurant with limited amount of trays, you need to get a tray if you want to get food. But because there are too many customers, it jammed the door . So there are many customers holding an empty tray while many food are waiting to be served.</p>
<p>Ryan point out a very important lesson here, that is, <code>you need to choose your bottleneck, and it should really be the capital intensive assets.</code> Going back to our restaurant’s analogy, chef and space is probably the most expensive assets, so we should try to keep the utilization high. A simple solution is to buy more trays, so that it won’t be jammed. Ofcourse, you can also find a larger space, build a bigger door, but that will cost you more money too.</p>
<p>For shipping, the terminal’s crane should be the most capital intensive, so we should try our best to keep it working 24/7 to digest the terminal queue.</p>
<p>This is a simple idea yet it is powerful and it strikes me hard. As a data scientist, I work on optimization problem. To maximize the output of a system, we can use linear programming. When we are solving this problem, we are asking question like this.</p>
<blockquote class="blockquote">
<p>Given x1 Terminals, x2 drivers, x3 containers, x4 ships, what is the maximize output of this system and <strong>how</strong> do you arrange them to achieve so?</p>
</blockquote>
<p>However, if you are a product/business analyst, a better question may be &gt; What is the output of this system if I add more container yard space?</p>
<p>By changing the input of the system, you may achieve much better result. But as a data scientist, we often stuck in a mode that how do we optimize x metrics with these features. So we may end up spending months and try to schedule ships and driver perfectly to load 10% more container, but you can actually increase loading efficiency by 50% simply by adding more yard space. It feels like cheating as a scientific question, since this is not we asked originally, but this happened a lot in a business context.</p>
<p>We are not trying to find the best algorithm to solve a problem, the algorithm is just <strong>one way</strong> of doing it. We may get surprising result by just tweaking the asked question a little bit.</p>
<p>I am curious about what is the limiting factor in our current supply chain system, and how sensitive it is to the environment. Is forecasting &amp; optimization the right way to do it? Do we actually need a precise forecast or we can have a bit of redundancy (like in this case, having extra yard space which could be a waste but improve the system robustness)? This is questions that we need to ask ourselves constantly, as the true question is often not asked, but explored after lots of iterations. We need to, and we have to ask the right question, and that is an art more elegant than an algorithm in my opinion.</p>
<p>I do not know if Ryan’s word are 100% true, but it reminds me an important lesson. The right solution (question) may be simple, but it may not be obvious. Have we exploited all the simple solution before we went nuts with fancy algorithms?</p>
<p>p.s. Apologised as I don’t have time to proofread but simply try to write down the snapshot of my current mind [2021-11-18]</p>
<section id="reference" class="level1">
<h1>Reference</h1>
<p>{% twitter https://twitter.com/typesfast/status/1451543776992845834?s=20 %} https://twitter.com/typesfast/status/1451543776992845834?s=20 https://www.facebook.com/669645890/posts/10159859049175891/ unroll version: https://threadreaderapp.com/thread/1451543776992845834.html</p>


</section>

 ]]></description>
  <category>product</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-11-18-what-can-we-learn-from-shipping-crisis-as-a-data-scientist.html</guid>
  <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/2021-11-18-23-37-38.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Python FileNotFoundError or You have a really long file path?</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-08-18-python-file-not-found-long-file-path-window.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="filenotfounderror-not-so-quick" class="level1">
<h1>FileNotFoundError? Not so quick</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/file_not_found/01.jpg" title="The sample file (Left), and a script to read this file (Right)" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">screenshot</figcaption><p></p>
</figure>
</div>
<p>To illustrate the issue, I perpared some fake file. The script is simple, it just read a file with plain text, except that the filename is really long.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/file_not_found/02_error.jpg" title="FileNotFoundError" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">error</figcaption><p></p>
</figure>
</div>
<p>Unforuntately, even though the file exists, <code>Python</code> gives me a <code>FileNotFoundError</code>, how come? However long debugging, I found out that this is related to the filename that exist only on Windows.</p>
<p>This <a href="https://stackoverflow.com/questions/36219317/pathname-too-long-to-open">StackOverflow thread</a> explain this issue.</p>
<blockquote class="blockquote">
<p><strong>Maximum Path Length Limitation</strong><br>
In the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is&nbsp;<strong>MAX_PATH</strong>, which is defined as 260 characters. A local path is structured in the following order: drive letter, colon, backslash, name components separated by backslashes, and a terminating null character. For example, the maximum path on drive D is “D:*some 256-character path string*<nul>” where “<nul>” represents the invisible terminating null character for the current system codepage. (The characters &lt; &gt; are used here for visual clarity and cannot be part of a valid path string.)</nul></nul></p>
</blockquote>
</section>
<section id="solution---registry" class="level1">
<h1>Solution - Registry</h1>
<p>Updating your <a href="https://lifehacker.com/windows-10-allows-file-names-longer-than-260-characters-1785201032">Registry</a> can solve this problem.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/file_not_found/03_error.jpg" title="The file can be read after updating the registry to enable long file path" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Hello World</figcaption><p></p>
</figure>
</div>
<p>After applying the config, I can finally read the file. :)</p>
</section>
<section id="summary-tldr-version" class="level1">
<h1>Summary (TLDR version)</h1>
<ul>
<li>Window filesystem only allow 256 characters, beyond that you will have trouble to open the file.</li>
<li>Python will not be able to see this file and throw <code>FileNotFoundError</code> (I have no idea, anyone know why is that?)</li>
<li>You can update registry to enable long file path in Window to fix this issue.</li>
</ul>
<p>(Bonus: Window actually has weird behavior for long filepath, you can try to break it with different ways.)</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-08-18-python-file-not-found-long-file-path-window.html</guid>
  <pubDate>Wed, 18 Aug 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/file_not_found/01.jpg " medium="image"/>
</item>
<item>
  <title>5 Minutes Data Science Design Patterns I - Callback</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-07-10-5minutes-data-science-design-pattern-callback.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>These series are written as a quick introduction to software design for data scientists, something that is lightweight than the Design Pattern Bible - <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> I wish exists when I first started to learn. Design patterns refer to reusable solutions to some common problems, and some happen to be useful for data science. There is a good chance that someone else has solved your problem before. When used wisely, it helps to reduce the complexity of your code.</p>
</div>
</div>
<section id="so-what-is-callback-after-all" class="level2">
<h2 class="anchored" data-anchor-id="so-what-is-callback-after-all">So, What is Callback after all?</h2>
<p><code>Callback</code> function, or call <strong>after</strong>, simply means a function will be <strong>called after</strong> another function. It is a piece of executable code (function) that passed as an <strong>argument</strong> to another function. <a href="https://stackoverflow.com/questions/824234/what-is-a-callback-function">[1]</a></p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> foo(x, callback<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb1-2">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'foo!'</span>)</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">if</span> callback:</span>
<span id="cb1-4">        callback(x)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">foo(<span class="st" style="color: #20794D;">'123'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo!</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">foo(<span class="st" style="color: #20794D;">'123'</span>, <span class="bu" style="color: null;">print</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo!
123</code></pre>
</div>
</div>
<p>Here I pass the function <code>print</code> as a callback, hence the string <code>123</code> get printed <strong>after</strong> <code>foo!</code>.</p>
</section>
<section id="why-do-i-need-to-use-callback" class="level2">
<h2 class="anchored" data-anchor-id="why-do-i-need-to-use-callback">Why do I need to use Callback?</h2>
<p><strong>Callback</strong> is very common in high-level deep learning libraries, most likely you will find them in the training loop. * <a href="https://docs.fast.ai/callback.core.html">fastai</a> - fastai provide high-level API for PyTorch * <a href="https://keras.io/api/callbacks/">Keras</a> - the high-level API for Tensorflow * <a href="https://github.com/pytorch/ignite">ignite</a> - they use event &amp; handler, which provides more flexibility in their opinion</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># A boring training Loop</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">def</span> train(x):</span>
<span id="cb6-5">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb6-6">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-7">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb6-11">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x <span class="op" style="color: #5E5E5E;">=</span> np.ones(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb7-2">train(x)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>So, let’s say you now want to print the loss at the end of an epoch. You can just add 1 lines of code.</p>
<section id="the-simple-approach" class="level3">
<h3 class="anchored" data-anchor-id="the-simple-approach">The simple approach</h3>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> train_with_print(x):</span>
<span id="cb8-2">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb8-3">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-4">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb8-8">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb8-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'End of Epoch. Epoch: </span><span class="sc" style="color: #5E5E5E;">{</span>epoch<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>loss<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;">return</span> loss</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">train_with_print(x)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>End of Epoch. Epoch: 0, Loss: 18
End of Epoch. Epoch: 1, Loss: 16
End of Epoch. Epoch: 2, Loss: 14</code></pre>
</div>
</div>
</section>
<section id="callback-approach" class="level3">
<h3 class="anchored" data-anchor-id="callback-approach">Callback approach</h3>
<p>Or you call add a PrintCallback, which does the same thing but with a bit more code.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">class</span> Callback:</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-3">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-6">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-7"></span>
<span id="cb11-8">    <span class="kw" style="color: #003B4F;">def</span> on_batch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-9">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-12">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;">class</span> PrintCallback(Callback):</span>
<span id="cb11-16">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb11-17">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'End of Epoch. Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb11-18"></span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="kw" style="color: #003B4F;">def</span> train_with_callback(x, callback<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb11-21">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb11-22">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb11-23">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb11-24"></span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb11-26"></span>
<span id="cb11-27">        callback.on_epoch_start(loss)</span>
<span id="cb11-28"></span>
<span id="cb11-29">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb11-30">            callback.on_batch_start(loss)</span>
<span id="cb11-31">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb11-32">            callback.on_batch_end(loss)</span>
<span id="cb11-33"></span>
<span id="cb11-34">        callback.on_epoch_end(loss)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">train_with_callback(x, callback<span class="op" style="color: #5E5E5E;">=</span>PrintCallback())<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>End of Epoch. Loss: 18
End of Epoch. Loss: 16
End of Epoch. Loss: 14</code></pre>
</div>
</div>
<p>Usually, a callback defines a few particular events <code>on_xxx_xxx</code>, which indicate that the function will be executed according to the corresponding condition. So all callbacks will inherit the base class <code>Callback</code>, and override the desired function, here we only implemented the <code>on_epoch_end</code> method because we only want to show the loss at the end.</p>
<p>It may seem awkward to write so many more code to do one simple thing, but there are good reasons. Consider now you need to add more features, how would you do it?</p>
<ul>
<li>ModelCheckpoint</li>
<li>Early Stopping</li>
<li>LearningRateScheduler</li>
</ul>
<p>You can just add code in the loop, but it will start growing into a really giant function. It is impossible to <strong>test</strong> this function because it does 10 things at the same time. In addition, the extra code may not even be related to the training logic, they are just there to save the model or plot a chart. So, it is best to separate the logic. A function should only do 1 thing according to the <a href="https://en.wikipedia.org/wiki/SOLID">Single Responsibility Principle</a>. It helps you to reduce the complexity as it provides a nice abstraction, you are only modifying code within the specific callback you are interested.</p>
</section>
<section id="add-some-more-sauce" class="level3">
<h3 class="anchored" data-anchor-id="add-some-more-sauce">Add some more sauce!</h3>
<p>When using the <strong>Callback</strong> Pattern, I can just implement a few more classes and the training loop is barely touched. Here we introduce a new class <code>Callbacks</code> because we need to execute more than 1 callback, it is used for holding all callbacks and executed them sequentially.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">class</span> Callbacks:</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">    It is the container for callback</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb14-5"></span>
<span id="cb14-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, callbacks):</span>
<span id="cb14-7">        <span class="va" style="color: #111111;">self</span>.callbacks <span class="op" style="color: #5E5E5E;">=</span> callbacks</span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-10">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-11">            callback.on_epoch_start(x)</span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-14">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-15">            callback.on_epoch_end(x)</span>
<span id="cb14-16"></span>
<span id="cb14-17">    <span class="kw" style="color: #003B4F;">def</span> on_batch_start(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-18">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-19">            callback.on_batch_start(x)</span>
<span id="cb14-20"></span>
<span id="cb14-21">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;">for</span> callback <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.callbacks:</span>
<span id="cb14-23">            callback.on_batch_end(x)</span></code></pre></div>
</div>
<p>Then we implement the new <strong>Callback</strong> one by one, here we only have the pseudocode, but you should get the gist. For example, we only need to save the model at the end of an epoch, thus we implement the method <code>on_epoch_end</code> with a <code>ModelCheckPoint</code> callback.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">class</span> PrintCallback(Callback):</span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: End of Epoch. Loss: </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="kw" style="color: #003B4F;">class</span> ModelCheckPoint(Callback):</span>
<span id="cb15-7">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-8">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Save Model'</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="kw" style="color: #003B4F;">class</span> EarlyStoppingCallback(Callback):</span>
<span id="cb15-12">    <span class="kw" style="color: #003B4F;">def</span> on_epoch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-13">        <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">16</span>:</span>
<span id="cb15-14">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'[</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Early Stopped'</span>)</span>
<span id="cb15-15"></span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="kw" style="color: #003B4F;">class</span> LearningRateScheduler(Callback):</span>
<span id="cb15-18">    <span class="kw" style="color: #003B4F;">def</span> on_batch_end(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb15-19">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'    [</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(<span class="va" style="color: #111111;">self</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">]: Reduce learning rate'</span>)</span></code></pre></div>
</div>
<p>And we also modify the training loop a bit, the argument now takes a <code>Callbacks</code> which contain zero to many callbacks.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> train_with_callbacks(x, callbacks<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb16-2">    n_epochs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb16-3">    n_batches <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb16-4">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_epochs):</span>
<span id="cb16-7"></span>
<span id="cb16-8">        callbacks.on_epoch_start(loss)                             <span class="co" style="color: #5E5E5E;"># on_epoch_start</span></span>
<span id="cb16-9">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_batches):</span>
<span id="cb16-10">            callbacks.on_batch_start(loss)                         <span class="co" style="color: #5E5E5E;"># on_batch_start</span></span>
<span id="cb16-11">            loss <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>  <span class="co" style="color: #5E5E5E;"># Pretend we are training the model</span></span>
<span id="cb16-12">            callbacks.on_batch_end(loss)                           <span class="co" style="color: #5E5E5E;"># on_batch_end</span></span>
<span id="cb16-13">        callbacks.on_epoch_end(loss)                               <span class="co" style="color: #5E5E5E;"># on_epoch_end</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">callbacks <span class="op" style="color: #5E5E5E;">=</span> Callbacks([PrintCallback(), ModelCheckPoint(),</span>
<span id="cb17-2">                      EarlyStoppingCallback(), LearningRateScheduler()])</span>
<span id="cb17-3">train_with_callbacks(x, callbacks<span class="op" style="color: #5E5E5E;">=</span>callbacks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
[PrintCallback]: End of Epoch. Loss: 17
[ModelCheckPoint]: Save Model
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
    [LearningRateScheduler]: Reduce learning rate
[PrintCallback]: End of Epoch. Loss: 14
[ModelCheckPoint]: Save Model
[EarlyStoppingCallback]: Early Stopped</code></pre>
</div>
</div>
<p>Hopefully, it convinces you <strong>Callback</strong> makes the code cleaner and easier to maintain. If you just use plain <code>if-else</code> statements, you may end up with a big chunk of <code>if-else</code> clauses.</p>
<ul>
<li><a href="https://docs.fast.ai/callback.core.html">fastai</a> - fastai provide high-level API for PyTorch</li>
<li><a href="https://keras.io/api/callbacks/">Keras</a> - the high-level API for Tensorflow</li>
<li><a href="https://github.com/pytorch/ignite">ignite</a> - they use event &amp; handler, which provides more flexibility in their opinion</li>
</ul>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<ol type="1">
<li>https://stackoverflow.com/questions/824234/what-is-a-callback-function</li>
</ol>


</section>

 ]]></description>
  <category>python</category>
  <category>design pattern</category>
  <category>software</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-07-10-5minutes-data-science-design-pattern-callback.html</guid>
  <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Jupyter Superpower - Extend SQL analysis with Python</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-06-26-jupyter-sql-notebook.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>If you have ever written SQL queries to extract data from a database, chances are you are familiar with an IDE like the screenshot below. The IDE offers features like auto-completion, visualize the query output, display the table schema and the ER diagram. Whenever you need to write a query, this is your go-to tool. However, you may want to add <code>Jupyter Notebook</code> into your toolkit. It improves my productivity by complementing some missing features in IDE.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/reviewnb/dbeaver.png" title="Screenshot of a typical IDE (DBeaver)" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Dbeaver</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># !pip install ipython_sql</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Download the file from https://github.com/cwoodruff/ChinookDatabase/blob/master/Scripts/Chinook_Sqlite.sqlite</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    </span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-9">DATA_DIR <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'../_demo/sql_notebook'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">select ProductId, Sum(Unit) <span class="im" style="color: #00769E;">from</span> Sales group by ProductId<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Sum(Unit)</th>
    </tr>
    <tr>
        <td>1</td>
        <td>210</td>
    </tr>
    <tr>
        <td>2</td>
        <td>50</td>
    </tr>
    <tr>
        <td>3</td>
        <td>30</td>
    </tr>
</tbody></table>
</div>
</div>
<section id="notebook-as-a-self-contained-report" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-a-self-contained-report">Notebook as a self-contained report</h2>
<p>As a data scientist/data analyst, you write SQL queries for ad-hoc analyses all the time. After getting the right data, you make nice-looking charts and put them in a PowerPoint and you are ready to present your findings. Unlike a well-defined ETL job, you are exploring the data and testing your hypotheses all the time. You make assumptions, which is often wrong but you only realized it after a few weeks. But all you got is a CSV that you cannot recall how it was generated in the first place.</p>
<p>Data is not stationary, why should your analysis be? I have seen many screenshots, fragmented scripts flying around in organizations. As a data scientist, I learned that you need to be cautious about what you heard. Don’t trust peoples’ words easily, verify the result! To achieve that, we need to know exactly how the data was extracted, what kind of assumptions have been made? Unfortunately, this information usually is not available. As a result, people are redoing the same analysis over and over. You will be surprised that this is very common in organizations. In fact, numbers often do not align because every department has its own definition for a given metric. It is not shared among the organization, and verbal communication is inaccurate and error-prone. It would be really nice if anyone in the organization can reproduce the same result with just a single click. Jupyter Notebook can achieve that reproducibility and keep your entire analysis (documentation, data, and code) in the same place.</p>
</section>
<section id="notebook-as-an-extension-of-ide" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-an-extension-of-ide">Notebook as an extension of IDE</h2>
<p>Writing SQL queries in a notebook gives you extra flexibility of a full programming language alongside SQL. For example:</p>
<ul>
<li>Write complex processing logic that is not easy in pure SQL</li>
<li>Create visualizations directly from SQL results without exporting to an intermediate CSV</li>
</ul>
<p>For instance, you can pipe your <code>SQL</code> query with <code>pandas</code> and then make a plot. It allows you to generate analysis with richer content. If you find bugs in your code, you can modify the code and re-run the analysis. This reduces the hustles to reproduce an analysis greatly. In contrast, if your analysis is reading data from an anonymous exported CSV, it is almost guaranteed that the definition of the data will be lost. No one will be able to reproduce the dataset.</p>
<p>You can make use of the <code>ipython_sql</code> library to make queries in a notebook. To do this, you need to use the <strong>magic</strong> function with the inline magic <code>%</code> or cell magic <code>%%</code>.</p>
<div class="cell" data-scrolled="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;">*</span> <span class="im" style="color: #00769E;">from</span> sales LIMIT <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-2">sales</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Unit</th>
        <th>IsDeleted</th>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>2</td>
        <td>10</td>
        <td>0</td>
    </tr>
</tbody></table>
</div>
</div>
<p>To make it fancier, you can even parameterize your query with variables. Tools like <a href="https://www.bing.com/search?q=github+paramter+notebook&amp;cvid=5b17218ec803438fb1ca41212d53d90a&amp;FORM=ANAB01&amp;PC=U531">papermill</a> allows you to parameterize your notebook. If you execute the notebook regularly with a scheduler, you can get a updated dashboard. To reference the python variable, the <code>$</code> sign is used.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">table <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"sales"</span></span>
<span id="cb4-2">query <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"SELECT * from </span><span class="sc" style="color: #5E5E5E;">{</span>table<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> LIMIT 3"</span></span>
<span id="cb4-3">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql $query</span>
<span id="cb4-4">sales</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<table>
    <tbody><tr>
        <th>ProductId</th>
        <th>Unit</th>
        <th>IsDeleted</th>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>1</td>
        <td>10</td>
        <td>1</td>
    </tr>
    <tr>
        <td>2</td>
        <td>10</td>
        <td>0</td>
    </tr>
</tbody></table>
</div>
</div>
<p>With a little bit of python code, you can make a nice plot to summarize your finding. You can even make an interactive plot if you want. This is a very powerful way to extend your analysis.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb5-2">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM SALES</span>
<span id="cb5-3">sales_df <span class="op" style="color: #5E5E5E;">=</span> sales.DataFrame()</span>
<span id="cb5-4">sales_df <span class="op" style="color: #5E5E5E;">=</span> sales_df.groupby(<span class="st" style="color: #20794D;">'ProductId'</span>, as_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb5-5">ax <span class="op" style="color: #5E5E5E;">=</span> sns.barplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ProductId'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Unit'</span>, data<span class="op" style="color: #5E5E5E;">=</span>sales_df)</span>
<span id="cb5-6">ax.set_title(<span class="st" style="color: #20794D;">'Sales by ProductId'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/blog/posts/2021-06-26-Jupyter-SQL-Notebook_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="notebook-as-a-collaboration-tool" class="level2">
<h2 class="anchored" data-anchor-id="notebook-as-a-collaboration-tool">Notebook as a collaboration tool</h2>
<p>Jupyter Notebook is flexible and it fits extremely well with exploratory data analysis. To share to a non-coder, you can share the notebook or export it as an HTML file. They can read the report or any cached executed result. If they need to verify the data or add some extra plots, they can do it easily themselves.</p>
<p>It is true that Jupyter Notebook has an infamous reputation. It is not friendly to version control, it’s hard to collaborate with notebooks. Luckily, there are efforts that make collaboration in notebook a lot easier now.</p>
<p>Here what I did not show you is that the table has an <code>isDeleted</code> column. Some of the records are invalid and we should exclude them. In reality, this happens frequently when you are dealing with hundreds of tables that you are not familiar with. These tables are made for applications, transactions, and they do not have analytic in mind. Data Analytic is usually an afterthought. Therefore, you need to consult the SME or the maintainer of that tables. It takes many iterations to get the correct data that can be used to produce useful insight.</p>
<p>With <a href="https://www.reviewnb.com/">ReviewNB</a>, you can publish your result and invite some domain expert to review your analysis. This is where notebook shine, this kind of workflow is not possible with just the SQL script or a screenshot of your finding. The notebook itself is a useful documentation and collaboration tool.</p>
<section id="step-1---review-pr-online" class="level3">
<h3 class="anchored" data-anchor-id="step-1---review-pr-online">Step 1 - Review PR online</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/reviewnb/step_1.png" title="Start a discussion on a cell block, the analyst suggest to add a filter to slice the correct data" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step1</figcaption><p></p>
</figure>
</div>
<p>You can view your notebook and add comments on a particular cell on <a href="https://www.reviewnb.com/">ReviewNB</a>. This lowers the technical barrier as your analysts do not have to understand Git. He can review changes and make comments on the web without the need to pull code at all. As soon as your analyst makes a suggestion, you can make changes.</p>
</section>
<section id="step-2---review-changes" class="level3">
<h3 class="anchored" data-anchor-id="step-2---review-changes">Step 2 - Review Changes</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/reviewnb/step_2.png" title="Review changes side by side" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step2</figcaption><p></p>
</figure>
</div>
<p>Once you have made changes to the notebook, you can review it side by side. This is very trivial to do it in your local machine. Without ReviewNB, you have to pull both notebooks separately. As Git tracks line-level changes, you can’t really read the changes as it consists of a lot of confusing noise. It would also be impossible to view changes about the chart with git.</p>
</section>
<section id="step-3---resolve-discussion" class="level3">
<h3 class="anchored" data-anchor-id="step-3---resolve-discussion">Step 3 - Resolve Discussion</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/reviewnb/step_3.png" title="Resolve the discussion." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Step3</figcaption><p></p>
</figure>
</div>
<p>Once the changes are reviewed, you can resolve the discussion and share your insight with the team. You can publish the notebook to internal sharing platform like <a href="https://github.com/airbnb/knowledge-repo">knowledge-repo</a> to organize the analysis.</p>
<p>I hope this convince you that Notebook is a good choice for adhoc analytics. It is possible to collaborate with notebook with proper software in place. Regarless if you use notebook or not, you should try your best to document the process. Let’s make more reproducible analyses!</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>reviewnb</category>
  <category>sql</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-06-26-jupyter-sql-notebook.html</guid>
  <pubDate>Sat, 26 Jun 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/reviewnb/dbeaver.png " medium="image"/>
</item>
<item>
  <title>A logging.config.dictConfig() issue in python</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-06-20-logging-config-dict-issue-kedro.html</link>
  <description><![CDATA[ 



<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> logging</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> clearml <span class="im" style="color: #00769E;">import</span> Task</span>
<span id="cb1-3">conf_logging <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"version"</span>:<span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb1-4">                <span class="st" style="color: #20794D;">"formatters"</span>:{</span>
<span id="cb1-5">                      <span class="st" style="color: #20794D;">"simple"</span>:{</span>
<span id="cb1-6">                             <span class="st" style="color: #20794D;">"format"</span>:<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%(asctime)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(name)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(levelname)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(message)s</span><span class="st" style="color: #20794D;">"</span>}</span>
<span id="cb1-7">                      }</span>
<span id="cb1-8">                  }</span>
<span id="cb1-9">t <span class="op" style="color: #5E5E5E;">=</span> Task.init(project_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb1-10">logging.config.dictConfig(conf_logging)</span>
<span id="cb1-11">logging.info(<span class="st" style="color: #20794D;">"INFO!"</span>)</span>
<span id="cb1-12">logging.debug(<span class="st" style="color: #20794D;">"DEBUG!"</span>)</span>
<span id="cb1-13">logging.warning(<span class="st" style="color: #20794D;">"WARN!"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"PRINT!"</span>)</span></code></pre></div>
<p>With this code block, you will find no print() or logging is sent to ClearML logging Console. Turns out <code>kedro</code> use <code>logging.config.dictConfig(conf_logging)</code> as the default and causing this issue.</p>
<p>A quick fix is to add <code>"incremental": True</code> in the config dict. In the <a href="https://docs.python.org/3/library/logging.config.html#:~:text=incremental%20-%20whether%20the%20configuration%20is%20to%20be%20interpreted%20as%20incremental%20to%20the%20existing%20configuration.%20This%20value%20defaults%20to%20False%2C%20which%20means%20that%20the%20specified%20configuration%20replaces%20the%20existing%20configuration%20with%20the%20same%20semantics%20as%20used%20by%20the%20existing%20fileConfig()%20API.">standard documentation</a>, the default is <code>False</code>, which means the configuration will replace existing one, thus removing the <code>clearml</code> handlers, and causing the issue I had.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">conf_logging <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"version"</span>:<span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb2-2">                <span class="st" style="color: #20794D;">"incremental"</span>: <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-3">                <span class="st" style="color: #20794D;">"formatters"</span>:{</span>
<span id="cb2-4">                      <span class="st" style="color: #20794D;">"simple"</span>:{</span>
<span id="cb2-5">                             <span class="st" style="color: #20794D;">"format"</span>:<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%(asctime)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(name)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(levelname)s</span><span class="st" style="color: #20794D;"> - </span><span class="sc" style="color: #5E5E5E;">%(message)s</span><span class="st" style="color: #20794D;">"</span>}</span>
<span id="cb2-6">                      }</span>
<span id="cb2-7">                  }</span></code></pre></div>
<!--truncate-->



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-06-20-logging-config-dict-issue-kedro.html</guid>
  <pubDate>Sun, 20 Jun 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Internal Series - Global Interpreter Lock (GIL) and Memory Management</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-05-29-python-internal-series-python-gil-and-memory.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="is-gil-a-bad-design" class="level2">
<h2 class="anchored" data-anchor-id="is-gil-a-bad-design">Is GIL a bad design?</h2>
<p>Most people first learn about GIL because of how it slows down Python program and prevent multi-threading running efficiently, however, the GIL is one of the reason why Python survive 30 years and still growing healthyly.</p>
<p>GIL is nothing like the stereotype people think, legacy, slow. There are multiple benefits GIL provide:</p>
<ul>
<li>It speed ups single thread program.</li>
<li>It is compatible with many C Program thanks to the C API of CPysthon.</li>
</ul>
</section>
<section id="global-interpreter-lock-a.k.a-mutex-lock" class="level2">
<h2 class="anchored" data-anchor-id="global-interpreter-lock-a.k.a-mutex-lock">Global Interpreter Lock a.k.a Mutex Lock</h2>
<p>To start with, GIL is a mutex lock.</p>
</section>
<section id="why-gil-is-needed-in-the-first-place" class="level2">
<h2 class="anchored" data-anchor-id="why-gil-is-needed-in-the-first-place">Why GIL is needed in the first place?</h2>
<p>Memory management. Python use something called “reference counting”, which make it different from many modern programming lanaguage. It is what allow Python programmer to lay back and let Python take care when to release memory. Precisely, it is actually the C program controlling the memory life cycle for Python (Cpython). Cpython is known as the default Python interpreter. It first compiles Python to intermediate bytecode (.pyc files). These bytecode then being interpreted by a virtual machine ane executed. It is worth to mention that other variants of Python exist, i.e.&nbsp;IronPython(C#), Jython(Java), Pypy(Python) and they have different memory management mechanisms.</p>
<section id="python-memory-management---reference-count-garbage-collection-gc" class="level3">
<h3 class="anchored" data-anchor-id="python-memory-management---reference-count-garbage-collection-gc">Python Memory Management - Reference Count &amp; Garbage Collection (gc)</h3>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> sys</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sys.getrefcount(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>3</code></pre>
</div>
</div>
<p>Reference counting is a simple idea. The intuition is that if a particular object is not referenced by anything, it can be recycled since it will not be used anymore.</p>
<p>For example, the list <code>[1]</code> is now referenced by the variable <code>a</code>, so the reference count is incremented by 1.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb4-2">a <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-3">sys.getrefcount(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>2</code></pre>
</div>
</div>
<p>Note that the reference count is 2 instead of 1. 1. The first reference is <code>a = [1]</code> 2. When the variable <code>a</code> is passed to <code>sys.getrefcount(a)</code> as an argument, it also increases the reference count.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">del</span> a</span></code></pre></div>
</div>
<p>When <code>del a</code> is called, the list <code>[1]</code> have 0 reference count, and it is collected by Python automatically behind the scene.</p>
</section>
<section id="lock-deadlock" class="level3">
<h3 class="anchored" data-anchor-id="lock-deadlock">Lock &amp; Deadlock</h3>
</section>
<section id="memory-management" class="level3">
<h3 class="anchored" data-anchor-id="memory-management">Memory Management</h3>
</section>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<ul>
<li>https://www.youtube.com/watch?v=KVKufdTphKs&amp;t=731s</li>
<li>https://realpython.com/python-gil/</li>
<li>https://devguide.python.org/garbage_collector/</li>
</ul>


</section>

 ]]></description>
  <category>python-internal</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-05-29-python-internal-series-python-gil-and-memory.html</guid>
  <pubDate>Sat, 29 May 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Full Stack Deep Learning Notes - Lecture 03 - Recurrent Neural Network</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-04-16-full-stack-deep-learning-lecture-03.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="lstm" class="level1">
<h1>LSTM</h1>
<p>Reference: https://colah.github.io/posts/2015-08-Understanding-LSTMs/</p>
<p>The diagrams are from Chris Colah’s blog.</p>
<table class="table">
<thead>
<tr class="header">
<th>RNN</th>
<th>LSTM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://noklam.github.io/blog/blog/posts/images/rnn.png" class="img-fluid" alt="RNN"></td>
<td><img src="https://noklam.github.io/blog/blog/posts/images/lstm.png" class="img-fluid" alt="LSTM"></td>
</tr>
</tbody>
</table>
<p><img src="https://noklam.github.io/blog/blog/posts/images/lstm_forget.png" class="img-fluid" alt="forget"> Forget Gate - Control the magnitude of cell state should be kept. Sigmoid range from (0 to 1). If 0, it means we should throw away the state cell, if 1 we keep everything. <img src="https://noklam.github.io/blog/blog/posts/images/lstm_input.png" class="img-fluid" alt="input"> * Input Gate - Control what relevant information can be added from the current step. It takes hidden step from last step and the current input into consideration. <img src="https://noklam.github.io/blog/blog/posts/images/lstm_output.png" class="img-fluid" alt="output"> * Output Gate - finalize the next hidden state</p>
</section>
<section id="google-neurl-machine-translation-gnmt" class="level1">
<h1># Google Neurl Machine Translation (GNMT)</h1>
<p>It more or less follow the attention mechanism described here.</p>
<p>https://blog.floydhub.com/attention-mechanism/#luong-att-step6</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/attention_gnmt.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">attention_gnmt</figcaption><p></p>
</figure>
</div>
<p>1.If you take the dot product of 1 encoder vector (at t_i) and decoder, you get a scalar. (Alignment Score) (1,h) * (h,1) -&gt; (1,1) 2. If encoder have 5 time_step, repeat the above steps -&gt; You get a vector with length of 5 (A vector of Alignment Scores) (5,h) <em>(h,1) -&gt; (5,1) 3. Take softmax of the alignments scores -&gt; (attention weights which sum to 1) (5,1) 4. Take dot product of encoders state with attention weights (h, 5) </em> (5, 1) -&gt; (h, 1), where h stands for dimension of hidden state. The result is a “Context Vector” <img src="https://noklam.github.io/blog/blog/posts/images/context_vector.png" class="img-fluid" alt="context"></p>


</section>

 ]]></description>
  <category>fsdl</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-04-16-full-stack-deep-learning-lecture-03.html</guid>
  <pubDate>Fri, 16 Apr 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/rnn.png" medium="image" type="image/png" height="54" width="144"/>
</item>
<item>
  <title>Microsoft Azure - DP100</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-03-27-microsoft-azure-dp100.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>Last Updated: 2021-04-22</p>
<blockquote class="blockquote">
<p>Warning - On Azure website, it states that exam outline will be updated on May 20, 2021. Make sure you check out what’s changed.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>There are 49 questions, some questions have more scores. You need to pass with at least 700/1000 points. For my exam, there are around 10-15% questions that are quite hard, but as long as you score the easy one, you should be able to pass the exam.</p>
<p>There are different type of questions. * Cases Studies - Usually there are some scenarios provided, and you can not go back to previous questions once you answered. For other questions, you can review anytime you want. * Matching - You need to pick a few choice and arrange them in order. i.e.&nbsp;How to create an envioronment tht fulfill the requirements provided. * Multiple Choices - Typical MC - It may ask to to select Azure Machine Learning Service/Azure Machine Learning Studio/Azure Databricks/Azure Kubernetes Service (AKS) - Syntax type questions (there are quite a few of them) - Diagram (Azure ML Designer)</p>
<p>I struggled with the first few questions and scratching my head for a while. Don’t panic if you just can’t remember the answer, take a guess, marked it as <code>review question</code> (You can do this with the UI). At the end, I scored 809/1000.</p>
</section>
<section id="how-to-prepare-for-the-exam" class="level1">
<h1>How to prepare for the exam</h1>
<p>I spent roughly 15 hours to prepare this exam. Half of the time I used on the lab, the other half for reading docs and historical exam questions. Prior to this exam, I have a little bit experience cloud and I work as a Data Scientist, so it gives me some edges for this exam. But you don’t need to have a lot background knowledge, most of the data science concepts tested is very general and you can learnt from the labs.</p>
<section id="official-suggested-materials" class="level2">
<h2 class="anchored" data-anchor-id="official-suggested-materials">Official Suggested Materials</h2>
<ul>
<li>❗ https://docs.microsoft.com/en-us/learn/paths/build-ai-solutions-with-azure-ml-service/ - This should be your main focus, try to finish the labs and read the tutorials. You need to understand the use case of different products and familiar yourself with the syntax of Azure ML SDK etc.</li>
<li>https://docs.microsoft.com/en-us/learn/paths/create-no-code-predictive-models-azure-machine-learning/ - You should at least finish 1 of the lab to get some sense of the UI. It would be included in the exam for sure (2-3 questions maybe)</li>
<li>https://docs.microsoft.com/en-us/learn/paths/create-machine-learn-models/ - I didn’t spend much time on it as most of them are baisc data science concepts. You would need to how to apply different types of models (Regression/Classification/Time Series) &amp; AutoML for given scenario.</li>
</ul>
</section>
</section>
<section id="key-concepts" class="level1">
<h1>Key Concepts</h1>
<p>I am pretty sure these concepts will come up in every exam set, so be prepared.</p>
<ul>
<li>Workspace</li>
<li>DataStore/Blobstore</li>
<li>Compute Target
<ul>
<li>Cluster/VM/ACI <a href="https://docs.microsoft.com/en-us/azure/machine-learning/concept-compute-target">link</a></li>
</ul></li>
</ul>
<section id="compute-target" class="level2">
<h2 class="anchored" data-anchor-id="compute-target">Compute Target</h2>
<p>Machine Learning Studio - single/multi - Development/Experiment - Local Machine/Cloud VM. - Scale up to larger data/distributed - training compute target - Azure Machine Learning compute cluster - Azure Machine Learning compute instance - Deploy Compute Target (You need to able to judge the most appropiate option based on the context.) - Local web service - Azure Kubernetes Service (AKS) - Azure Container Instances - Azure Machine Learning compute clusters (Batch Inference)</p>
</section>
<section id="datastore" class="level2">
<h2 class="anchored" data-anchor-id="datastore">DataStore</h2>
<ul>
<li>Azure Storage (blob and file containers)</li>
<li>Azure Data Lake stores</li>
<li>Azure SQL Database</li>
<li>Azure Databricks file system (DBFS)</li>
</ul>
</section>
</section>
<section id="syntax-type-questions" class="level1">
<h1>Syntax Type Questions</h1>
<p>For me, this are the <em>hard</em> questions. There are at least 10 questions that requires you to remember some syntax. If you did not prepared for this, you will find all options seems to be correct. These are the questions that I encountered in my exam.</p>
<p>Come back to here to check your knowledge after you finish the labs.</p>
<ul>
<li>Run vs mlflow (How to log a metric? What is the syntax with or without mlflow?)
<ul>
<li><code>run = Run.get_context()</code></li>
<li><a href="https://github.com/MicrosoftLearning/DP100/blob/master/03A%20-%20Running%20Experiments.ipynb">mflow</a></li>
</ul></li>
<li>Workspace/Config (how to create a workspace? How to get a reference of a specific workspace? What are the required arguments?) <a href="https://docs.microsoft.com/en-us/learn/modules/intro-to-azure-machine-learning-service/3-azure-ml-tools?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>Training a model and register a model/deploy</li>
<li>AutoML - Think about what you would do if you are using AutoML.
<ul>
<li>How to retrieve the best iteration model provided the experiment name or Run ID?</li>
<li>What are the Early Stopping choices you can use? <a href="https://docs.microsoft.com/en-us/learn/modules/tune-hyperparameters-with-azure-machine-learning/4-early-termination?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
</ul></li>
<li>Pipelines - I didn’t prepare well for this part, there are a few questions related to this topic. Again, familiar yourself with the syntax.
<ul>
<li>How to create/publish/schedule a pipeline, what are the syntax?</li>
<li>Do you publish a pipeline or schedule the pipeline first? <a href="https://docs.microsoft.com/en-us/learn/modules/create-pipelines-in-aml/5-publishing-pipelines?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>How to retrieve a publihsed pipeline? <a href="https://docs.microsoft.com/en-us/learn/modules/create-pipelines-in-aml/7-scheduling-pipelines?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
</ul></li>
<li>How to troubleshoot a service? Where can you find the log? <a href="https://docs.microsoft.com/en-us/learn/modules/register-and-deploy-model-with-amls/4-troubleshoot-deployment?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a></li>
<li>Explainer (What are the different use cases for different explainer? What are their limitation?) <a href="https://docs.microsoft.com/en-us/learn/modules/explain-machine-learning-models-with-azure-machine-learning/2-feature-importance?ns-enrollment-type=LearningPath&amp;ns-enrollment-id=learn.data-ai.build-ai-solutions-with-azure-ml-service">link</a>
<ul>
<li>How many Explainers are avaiable? (ans: 3!)</li>
</ul></li>
</ul>
</section>
<section id="example-questiions" class="level1">
<h1>Example Questiions</h1>
<p>You can also leverage the exam simulator, the free demo version will give you access to 19 questions, if you are willing to pay, you can access all 120 questions. Out of the 19 questions, there are around 4~5 similar questions appear in my DP-100 exam. If your goal is to pass this exam</p>
<ul>
<li><a href="https://www.examtopics.com/exams/microsoft/dp-100/view/">Website for DP-100, they are updated frequently</a></li>
<li><a href="https://www.exam-labs.com/dumps/DP-100">Questions</a> - Look for the “Free VCE Files”</li>
<li><a href="https://www.avanset.com/demo.html%20(software%20to%20open%20.vce%20file)">Example Simulator</a></li>
</ul>
<p>Finanlly, good luck to your exam. Try compare and contrast the workflow when you are doing the tutorials. Overall, Azure is well aware with the MLOps trend, the platform makes it quite easy to handle machine learning pipeline and deploy a model. Once you can related it to your daily work, you would find most of the steps are reasonable and easier to remember.</p>


</section>

 ]]></description>
  <category>azure</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-03-27-microsoft-azure-dp100.html</guid>
  <pubDate>Sat, 27 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Full Stack Deep Learning Notes - Lecture 01</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-03-21-full-stack-deep-learning-lecture-01.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="advantages-over-unstructured-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="advantages-over-unstructured-pytorch">Advantages over unstructured PyTorch</h2>
<ul>
<li>Models become hardware agnostic</li>
<li>Code is clear to read because engineering code is abstracted away</li>
<li>Easier to reproduce</li>
<li>Make fewer mistakes because lightning handles the tricky engineering</li>
<li>Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate</li>
<li>Lightning has dozens of integrations with popular machine learning tools.</li>
<li><a href="https://github.com/PyTorchLightning/pytorch-lightning/tree/master/tests">Tested rigorously with every new PR</a>. We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.</li>
<li>Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).</li>
</ul>
</section>
<section id="basic-trainer" class="level1">
<h1>Basic Trainer</h1>
<p>https://pytorch-lightning.readthedocs.io/en/0.7.3/lightning-module.html</p>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> pytorch_lightning <span class="im" style="color: #00769E;">import</span> Trainer</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> torch.nn <span class="im" style="color: #00769E;">import</span> functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> torch.utils.data <span class="im" style="color: #00769E;">import</span> DataLoader</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> torchvision.datasets <span class="im" style="color: #00769E;">import</span> MNIST</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> transforms</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> pytorch_lightning <span class="im" style="color: #00769E;">as</span> pl</span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-15">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb1-16">        <span class="va" style="color: #111111;">self</span>.l1 <span class="op" style="color: #5E5E5E;">=</span> torch.nn.Linear(<span class="dv" style="color: #AD0000;">28</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">return</span> torch.relu(<span class="va" style="color: #111111;">self</span>.l1(x.view(x.size(<span class="dv" style="color: #AD0000;">0</span>), <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;">def</span> training_step(<span class="va" style="color: #111111;">self</span>, batch, batch_nb):</span>
<span id="cb1-22">        x, y <span class="op" style="color: #5E5E5E;">=</span> batch</span>
<span id="cb1-23">        loss <span class="op" style="color: #5E5E5E;">=</span> F.cross_entropy(<span class="va" style="color: #111111;">self</span>(x), y)</span>
<span id="cb1-24">        tensorboard_logs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'train_loss'</span>: loss}</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'loss'</span>: loss, <span class="st" style="color: #20794D;">'log'</span>: tensorboard_logs}</span>
<span id="cb1-26"></span>
<span id="cb1-27">    <span class="kw" style="color: #003B4F;">def</span> configure_optimizers(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;">return</span> torch.optim.Adam(<span class="va" style="color: #111111;">self</span>.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.02</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">train_loader <span class="op" style="color: #5E5E5E;">=</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">mnist_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb2-4">trainer <span class="op" style="color: #5E5E5E;">=</span> pl.Trainer(gpus<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, progress_bar_refresh_rate<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)    </span>
<span id="cb2-5">trainer.fit(mnist_model, train_loader)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"181d5c74571c4beebe725f7968f9603f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: The {log:dict keyword} was deprecated in 0.9.1 and will be removed in 1.0.0
Please use self.log(...) inside the lightningModule instead.
# log on a step or aggregate epoch metric to the logger and/or progress bar (inside LightningModule)
self.log('train_loss', loss, on_step=True, on_epoch=True, prog_bar=True)
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>1</code></pre>
</div>
</div>
<p>If you def <code>train_dataloader</code>, <code>Trainer</code> will use it automatically.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> train_dataloader(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;"># REQUIRED</span></span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;">return</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">SimpleLightningModel.train_dataloader  <span class="op" style="color: #5E5E5E;">=</span> train_dataloader</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb10-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-3">trainer.fit(pl_model)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7e32fc914f2f427595370b655aa83233","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>1</code></pre>
</div>
</div>
<p><code>training_step()</code>, <code>train_dataloader()</code>,<code>configure_optimizers()</code> are essential for <code>LightningModule</code>.</p>
<p>Lifecycle The methods in the LightningModule are called in this order:</p>
<ul>
<li><code>__init__</code></li>
<li><code>prepare_data</code></li>
<li><code>configure_optimizers</code></li>
<li><code>train_dataloader</code></li>
</ul>
<p>If you define a validation loop then <code>val_dataloader</code></p>
<p>And if you define a test loop: <code>test_dataloader</code></p>
<p>You will find <code>Trainer.fit()</code> automatically do validation and testing for you.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> validation_step(<span class="va" style="color: #111111;">self</span>, batch, batch_nb):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-3">    x, y <span class="op" style="color: #5E5E5E;">=</span> batch</span>
<span id="cb14-4">    y_hat <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>(x)</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: F.cross_entropy(y_hat, y)}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;">def</span> validation_epoch_end(<span class="va" style="color: #111111;">self</span>, outputs):</span>
<span id="cb14-8">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-9">    avg_loss <span class="op" style="color: #5E5E5E;">=</span> torch.stack([x[<span class="st" style="color: #20794D;">'val_loss'</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> outputs]).mean()</span>
<span id="cb14-10">    tensorboard_logs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: avg_loss}</span>
<span id="cb14-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Validation Loss: "</span>, avg_loss)</span>
<span id="cb14-12">    <span class="cf" style="color: #003B4F;">return</span> {<span class="st" style="color: #20794D;">'val_loss'</span>: avg_loss, <span class="st" style="color: #20794D;">'log'</span>: tensorboard_logs}</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;">def</span> val_dataloader(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;"># OPTIONAL</span></span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;">return</span> DataLoader(MNIST(os.getcwd(), train<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, download<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, transform<span class="op" style="color: #5E5E5E;">=</span>transforms.ToTensor()), batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">SimpleLightningModel.validation_step <span class="op" style="color: #5E5E5E;">=</span> validation_step</span>
<span id="cb15-2">SimpleLightningModel.validation_epoch_end <span class="op" style="color: #5E5E5E;">=</span> validation_epoch_end</span>
<span id="cb15-3">SimpleLightningModel.val_dataloader <span class="op" style="color: #5E5E5E;">=</span> val_dataloader</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="30">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb16-2">trainer <span class="op" style="color: #5E5E5E;">=</span> Trainer(max_epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb16-3">trainer.fit(pl_model)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>GPU available: False, used: False
TPU available: None, using: 0 TPU cores

  | Name | Type   | Params
--------------------------------
0 | l1   | Linear | 7.9 K 
--------------------------------
7.9 K     Trainable params
0         Non-trainable params
7.9 K     Total params
0.031     Total estimated model params size (MB)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Validation Loss:  tensor(2.3084)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"692b7ce421f842018c01dbc37c9537af","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Validation Loss:  tensor(1.1287)
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\programdata\miniconda3\lib\site-packages\pytorch_lightning\utilities\distributed.py:51: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...
  warnings.warn(*args, **kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>1</code></pre>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you are running the above cell, you will see validation progress bar in action.</p>
</div>
</div>
<p>By using the trainer you automatically get: * Tensorboard logging * Model checkpointing * Training and validation loop * early-stopping</p>
</section>
<section id="pytorch-nn.module-versus-pl.lightningmodule" class="level1">
<h1>Pytorch nn.Module versus pl.LightningModule</h1>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb22-2"><span class="im" style="color: #00769E;">import</span> pytorch_lightning <span class="im" style="color: #00769E;">as</span> pl</span>
<span id="cb22-3"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">x <span class="op" style="color: #5E5E5E;">=</span> torch.rand((<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb23-2">x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[0.0745, 0.0237, 0.4719, 0.6037, 0.6015, 0.0921, 0.5982, 0.4860, 0.0959,
         0.5204],
        [0.2481, 0.2893, 0.5760, 0.3834, 0.6479, 0.0508, 0.5352, 0.5702, 0.4732,
         0.3867],
        [0.3467, 0.3321, 0.8570, 0.0983, 0.9210, 0.1848, 0.7397, 0.1350, 0.2646,
         0.7202],
        [0.6952, 0.8071, 0.1428, 0.3600, 0.1514, 0.2246, 0.8887, 0.9971, 0.0257,
         0.5519],
        [0.7547, 0.7165, 0.3677, 0.6642, 0.9991, 0.6585, 0.8673, 0.5005, 0.1843,
         0.1360],
        [0.1809, 0.0794, 0.5101, 0.6751, 0.2822, 0.6695, 0.8085, 0.2127, 0.7562,
         0.9859],
        [0.5914, 0.4481, 0.5107, 0.0032, 0.9766, 0.4627, 0.1520, 0.2915, 0.4323,
         0.3833],
        [0.6371, 0.7782, 0.7762, 0.4197, 0.2566, 0.7240, 0.0759, 0.9976, 0.6020,
         0.9528],
        [0.7674, 0.4044, 0.3497, 0.9784, 0.9318, 0.7313, 0.2962, 0.6555, 0.5570,
         0.9998],
        [0.1155, 0.8013, 0.7982, 0.5713, 0.2252, 0.4513, 0.8395, 0.7791, 0.1929,
         0.7707]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">class</span> SimplePytorchModel(nn.Module):</span>
<span id="cb25-2">    ...</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">torch_model <span class="op" style="color: #5E5E5E;">=</span> SimplePytorchModel()</span>
<span id="cb26-2">torch_model(x)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NotImplementedError: </code></pre>
</div>
</div>
<p>In python, a <code>NotImplementedError</code> usually appears when you inherit an abstract class, it is a way to tell you that you should implement <code>forward</code> method.</p>
<div class="cell" data-scrolled="true" data-execution_count="40">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">class</span> SimplePytorchModel(nn.Module):</span>
<span id="cb28-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb28-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb28-4">        <span class="va" style="color: #111111;">self</span>.linear <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb28-5">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>,x):</span>
<span id="cb28-6">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.linear(x)</span>
<span id="cb28-7">        </span>
<span id="cb28-8">torch_model <span class="op" style="color: #5E5E5E;">=</span> SimplePytorchModel()</span>
<span id="cb28-9">torch_model(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>tensor([[-0.1243,  0.2997,  0.0861,  0.1849,  0.7241,  0.2632, -0.0680, -0.2111,
         -0.2606,  0.0837],
        [-0.0055,  0.1734,  0.2746,  0.1991,  0.6859,  0.2768,  0.0025, -0.2273,
         -0.1930,  0.2122],
        [-0.1407,  0.2008,  0.3773,  0.0956,  0.9796,  0.1915,  0.2936, -0.0837,
         -0.3146,  0.0808],
        [-0.0511,  0.1153,  0.2846,  0.2106,  0.7390,  0.0737, -0.1066, -0.3968,
         -0.3212,  0.2819],
        [-0.3408,  0.3093,  0.3826,  0.0783,  0.5542,  0.1298, -0.1768, -0.1407,
         -0.4774,  0.1776],
        [-0.1892,  0.2563,  0.1489, -0.0091,  0.4639,  0.1332, -0.0166, -0.3798,
         -0.4021,  0.2960],
        [-0.1463,  0.0375,  0.4741,  0.0881,  0.5674, -0.0446,  0.1802, -0.2256,
         -0.3006,  0.0376],
        [-0.1006, -0.1654,  0.3519,  0.3158,  0.5454, -0.0781,  0.0866, -0.4032,
         -0.5419,  0.2580],
        [-0.4006,  0.3089,  0.3450, -0.1411,  0.4353, -0.0416, -0.1630, -0.4652,
         -0.7266,  0.1949],
        [-0.1350,  0.0554,  0.1492,  0.4462,  0.8991,  0.2545,  0.1237, -0.1321,
         -0.4591,  0.2725]], grad_fn=&lt;AddmmBackward&gt;)</code></pre>
</div>
</div>
<p><code>pl.LightningModule</code> is a higher level class for nn.Module.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb30-2">    ...</span>
<span id="cb30-3">    </span>
<span id="cb30-4">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb30-5">pl_model(x)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NotImplementedError: </code></pre>
</div>
</div>
<p>It shouldn’t surprise you the same error pop out again, after all, <code>pl.LightningModule</code> is a high level wrapper for <code>nn.Module</code>. So we need to implement what is the <code>forward</code> method too. We can confirm this with this line.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="bu" style="color: null;">issubclass</span>(pl.LightningModule, nn.Module)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">class</span> SimpleLightningModel(pl.LightningModule):</span>
<span id="cb34-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb34-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb34-4">        <span class="va" style="color: #111111;">self</span>.linear <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb34-5">        </span>
<span id="cb34-6">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>,x):</span>
<span id="cb34-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.linear(x)</span>
<span id="cb34-8">    </span>
<span id="cb34-9">pl_model <span class="op" style="color: #5E5E5E;">=</span> SimpleLightningModel()</span>
<span id="cb34-10">pl_model(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor([[-1.9430e-01, -3.2665e-01,  1.5439e-01, -9.5051e-02, -2.6667e-01,
          7.0515e-01,  5.4318e-01,  4.8522e-02,  2.2087e-01,  4.6927e-02],
        [-1.9757e-01, -4.1862e-01,  1.0334e-01, -1.7735e-01, -3.7793e-01,
          7.6570e-01,  5.1128e-01, -5.9839e-04,  2.5192e-01,  9.6547e-02],
        [-2.1917e-01, -3.4533e-01,  1.6259e-01, -3.4603e-02, -5.8233e-01,
          7.6317e-01,  4.2289e-01, -5.8673e-02,  1.8833e-01,  9.4830e-02],
        [ 1.8358e-01, -4.9185e-01,  3.7877e-01, -2.4924e-03,  8.9796e-02,
          8.3502e-01,  6.2751e-01, -8.9419e-02,  5.8510e-01,  4.9892e-01],
        [-4.1500e-01, -5.1444e-01,  3.3273e-01, -1.9838e-01, -2.7256e-01,
          7.2250e-01,  3.3026e-01, -3.0803e-01,  4.8670e-01, -7.5673e-02],
        [-3.1485e-01, -5.7277e-01,  1.1172e-01,  2.0040e-01, -1.3642e-01,
          1.1535e+00,  4.7762e-01,  1.8485e-01, -1.2243e-01, -7.5894e-02],
        [-4.0921e-01, -4.7966e-01,  6.6770e-02, -2.1177e-01, -6.4936e-01,
          6.5091e-01,  1.9740e-01, -2.5598e-01,  6.5671e-02,  1.9597e-01],
        [-9.3814e-02, -6.7715e-01,  1.8347e-01, -2.4216e-01, -2.0083e-01,
          1.1088e+00,  4.1320e-01, -3.5082e-01,  1.6069e-01,  6.4193e-01],
        [-4.7541e-01, -8.7359e-01,  2.3989e-01, -3.2175e-01, -2.7573e-01,
          9.9955e-01,  3.8217e-01, -2.8564e-01,  1.1412e-02,  7.2301e-02],
        [-1.6360e-03, -3.6030e-01,  2.6286e-01,  5.9354e-02,  7.0063e-02,
          1.0381e+00,  5.0484e-01, -8.8854e-02,  3.9800e-01,  3.4168e-01]],
       grad_fn=&lt;AddmmBackward&gt;)</code></pre>
</div>
</div>
</section>
<section id="pytorch-dataloader-versus-pl.datamoudle" class="level1">
<h1>Pytorch Dataloader versus pl.DataMoudle</h1>
<p>A DataModule implements 5 key methods: * prepare_data (things to do on 1 GPU/TPU not on every GPU/TPU in distributed mode, e.g.&nbsp;split data). * setup (things to do on every accelerator in distributed mode, e.g.&nbsp;download data). * train_dataloader the training dataloader. * val_dataloader the val dataloader(s). * test_dataloader the test dataloader(s).</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Why do we need to to <code>setup</code>? It’s more a design choice, the benefit of doing so is that the framework takes care how to do distributed training in most efficient way. On the other hand, if you only doing local training on 1 GPU, there is not much benefit of doing so.</p>
</div>
</div>
</section>
<section id="trainer.tune" class="level1">
<h1>Trainer.tune()</h1>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">    <span class="kw" style="color: #003B4F;">def</span> tune(<span class="va" style="color: #111111;">self</span>, model, train_dataloader, val_dataloaders, datamodule):</span>
<span id="cb36-2">        <span class="co" style="color: #5E5E5E;"># Run auto batch size scaling</span></span>
<span id="cb36-3">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size:</span>
<span id="cb36-4">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(<span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size, <span class="bu" style="color: null;">bool</span>):</span>
<span id="cb36-5">                <span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'power'</span></span>
<span id="cb36-6">            <span class="va" style="color: #111111;">self</span>.scale_batch_size(</span>
<span id="cb36-7">                model,</span>
<span id="cb36-8">                mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.trainer.auto_scale_batch_size,</span>
<span id="cb36-9">                train_dataloader<span class="op" style="color: #5E5E5E;">=</span>train_dataloader,</span>
<span id="cb36-10">                val_dataloaders<span class="op" style="color: #5E5E5E;">=</span>val_dataloaders,</span>
<span id="cb36-11">                datamodule<span class="op" style="color: #5E5E5E;">=</span>datamodule,</span>
<span id="cb36-12">            )</span>
<span id="cb36-13"></span>
<span id="cb36-14">        <span class="co" style="color: #5E5E5E;"># Run learning rate finder:</span></span>
<span id="cb36-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.trainer.auto_lr_find:</span>
<span id="cb36-16">            <span class="va" style="color: #111111;">self</span>.lr_find(model, update_attr<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<p>The main usage of <code>Trainer.tune()</code> is to automatically find the best learning rate and batch size according to your model.</p>
</section>
<section id="now-back-to-our-lab1-trainingrun_experiment.py" class="level1">
<h1>Now Back to our Lab1 (training/run_experiment.py)</h1>
<p>I slightly modified the script so it can be run inside a notebook instead of using <code>argparse</code>. We change these arguments to variable instead.</p>
<p><code>python3 training/run_experiment.py --model_class=MLP --data_class=MNIST --max_epochs=5 --gpus=1 --fc1=4 --fc2=8</code></p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Add current directory so we can import the library</span></span>
<span id="cb37-2"><span class="im" style="color: #00769E;">import</span> os, sys</span>
<span id="cb37-3">sys.path.append(os.path.join(os.path.dirname(os.getcwd()), <span class="st" style="color: #20794D;">"text_recognizer"</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">parser <span class="op" style="color: #5E5E5E;">=</span> _setup_parser()</span>
<span id="cb38-2">args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args([</span>
<span id="cb38-3">    <span class="st" style="color: #20794D;">'--model_class'</span>,</span>
<span id="cb38-4">    <span class="st" style="color: #20794D;">'MLP'</span>,</span>
<span id="cb38-5">    <span class="st" style="color: #20794D;">'--data_class'</span>,</span>
<span id="cb38-6">    <span class="st" style="color: #20794D;">'MNIST'</span>,</span>
<span id="cb38-7">    <span class="st" style="color: #20794D;">'--max_epochs'</span>,</span>
<span id="cb38-8">    <span class="st" style="color: #20794D;">'5'</span>,</span>
<span id="cb38-9">    <span class="st" style="color: #20794D;">'--gpus'</span>,</span>
<span id="cb38-10">    <span class="st" style="color: #20794D;">'0'</span>,</span>
<span id="cb38-11">    <span class="st" style="color: #20794D;">'--fc1'</span>,</span>
<span id="cb38-12">    <span class="st" style="color: #20794D;">'4'</span>,</span>
<span id="cb38-13">    <span class="st" style="color: #20794D;">'--fc2'</span>,</span>
<span id="cb38-14">    <span class="st" style="color: #20794D;">'8'</span>,</span>
<span id="cb38-15">    ])</span>
<span id="cb38-16"></span>
<span id="cb38-17">data_class <span class="op" style="color: #5E5E5E;">=</span> _import_class(<span class="ss" style="color: #20794D;">f"text_recognizer.data.</span><span class="sc" style="color: #5E5E5E;">{</span>args<span class="sc" style="color: #5E5E5E;">.</span>data_class<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-18">model_class <span class="op" style="color: #5E5E5E;">=</span> _import_class(<span class="ss" style="color: #20794D;">f"text_recognizer.models.</span><span class="sc" style="color: #5E5E5E;">{</span>args<span class="sc" style="color: #5E5E5E;">.</span>model_class<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-19"></span>
<span id="cb38-20">data <span class="op" style="color: #5E5E5E;">=</span> data_class(args)</span>
<span id="cb38-21">model <span class="op" style="color: #5E5E5E;">=</span> model_class(data_config<span class="op" style="color: #5E5E5E;">=</span>data.config(), args<span class="op" style="color: #5E5E5E;">=</span>args)</span>
<span id="cb38-22"></span>
<span id="cb38-23"><span class="cf" style="color: #003B4F;">if</span> args.loss <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'ctc'</span>, <span class="st" style="color: #20794D;">'transformer'</span>):</span>
<span id="cb38-24">    lit_model_class <span class="op" style="color: #5E5E5E;">=</span> lit_models.BaseLitModel</span>
<span id="cb38-25"></span>
<span id="cb38-26"><span class="cf" style="color: #003B4F;">if</span> args.load_checkpoint <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb38-27">    lit_model <span class="op" style="color: #5E5E5E;">=</span> lit_model_class.load_from_checkpoint(args.load_checkpoint, args<span class="op" style="color: #5E5E5E;">=</span>args, model<span class="op" style="color: #5E5E5E;">=</span>model)</span>
<span id="cb38-28"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb38-29">    lit_model <span class="op" style="color: #5E5E5E;">=</span> lit_model_class(args<span class="op" style="color: #5E5E5E;">=</span>args, model<span class="op" style="color: #5E5E5E;">=</span>model)</span>
<span id="cb38-30"></span>
<span id="cb38-31">logger <span class="op" style="color: #5E5E5E;">=</span> pl.loggers.TensorBoardLogger(<span class="st" style="color: #20794D;">"training/logs"</span>)</span>
<span id="cb38-32"></span>
<span id="cb38-33">callbacks <span class="op" style="color: #5E5E5E;">=</span> [pl.callbacks.EarlyStopping(monitor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"val_loss"</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"min"</span>, patience<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)]</span>
<span id="cb38-34">args.weights_summary <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"full"</span>  <span class="co" style="color: #5E5E5E;"># Print full summary of the model</span></span>
<span id="cb38-35"></span>
<span id="cb38-36">trainer <span class="op" style="color: #5E5E5E;">=</span> pl.Trainer.from_argparse_args(args, callbacks<span class="op" style="color: #5E5E5E;">=</span>callbacks, logger<span class="op" style="color: #5E5E5E;">=</span>logger, default_root_dir<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"training/logs"</span>)</span>
<span id="cb38-37">trainer.tune(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)  <span class="co" style="color: #5E5E5E;"># If passing --auto_lr_find, this will set learning rate</span></span>
<span id="cb38-38">trainer.fit(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span>
<span id="cb38-39">trainer.test(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">trainer.tune(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)  <span class="co" style="color: #5E5E5E;"># If passing --auto_lr_find, this will set learning rate</span></span>
<span id="cb39-2">trainer.fit(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span>
<span id="cb39-3">trainer.test(lit_model, datamodule<span class="op" style="color: #5E5E5E;">=</span>data)</span></code></pre></div>
<ol type="1">
<li>First line try to find the optimal batch size</li>
<li>Second line try to trains 5 epochs</li>
<li>Run test defined in <code>DataModule</code></li>
</ol>


</section>

 ]]></description>
  <category>fsdl</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-03-21-full-stack-deep-learning-lecture-01.html</guid>
  <pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>deepcopy, LGBM and pickle</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-03-19-deepcopy-lightgbm-and-🥒pickles.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>To start with, let’s look at some code to get some context.</p>
<section id="deepcopy-or-no-copy" class="level2">
<h2 class="anchored" data-anchor-id="deepcopy-or-no-copy">deepcopy or no copy?</h2>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> lightgbm <span class="im" style="color: #00769E;">as</span> lgb</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> copy <span class="im" style="color: #00769E;">import</span> deepcopy</span>
<span id="cb1-5"></span>
<span id="cb1-6">params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb1-7"><span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'regression'</span>,</span>
<span id="cb1-8"><span class="st" style="color: #20794D;">'verbose'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-9"><span class="st" style="color: #20794D;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb1-10">}</span>
<span id="cb1-11"></span>
<span id="cb1-12">X <span class="op" style="color: #5E5E5E;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-13">Y <span class="op" style="color: #5E5E5E;">=</span> np.ravel(np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-14">lgbm <span class="op" style="color: #5E5E5E;">=</span> lgb.train(params, lgb.Dataset(X,label<span class="op" style="color: #5E5E5E;">=</span>Y),num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parameters of the model: "</span>, lgbm.params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameters of the model:  {'objective': 'regression', 'verbose': -1, 'num_leaves': 3, 'num_iterations': 1, 'early_stopping_round': None}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">## Deep copy will missing params</span></span>
<span id="cb3-2">new_model <span class="op" style="color: #5E5E5E;">=</span> deepcopy(lgbm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished loading model, total used 1 iterations</code></pre>
</div>
</div>
<p>You would expect <code>new_model.parameters</code> return the same dict right? Not quite.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parameters of the copied model: "</span>, new_model.params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameters of the copied model:  {}</code></pre>
</div>
</div>
<p>Surprise, surprise. It’s an empty dict, where did the parameters go? To dive deep into the issue, let’s have a look at the source code of <code>deepcopy</code> to understand how does it work.</p>
<p>reference: https://github.com/python/cpython/blob/e8e341993e3f80a3c456fb8e0219530c93c13151/Lib/copy.py#L128</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> deepcopy(x, memo<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, _nil<span class="op" style="color: #5E5E5E;">=</span>[]):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;">"""Deep copy operation on arbitrary Python objects.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">    See the module's __doc__ string for more info.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">    ... <span class="co" style="color: #5E5E5E;"># skip some irrelevant code  </span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    cls <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">type</span>(x)</span>
<span id="cb7-9"></span>
<span id="cb7-10">    copier <span class="op" style="color: #5E5E5E;">=</span> _deepcopy_dispatch.get(cls)</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;">if</span> copier <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb7-12">        y <span class="op" style="color: #5E5E5E;">=</span> copier(x, memo)</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">issubclass</span>(cls, <span class="bu" style="color: null;">type</span>):</span>
<span id="cb7-15">            y <span class="op" style="color: #5E5E5E;">=</span> _deepcopy_atomic(x, memo)</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-17">            copier <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(x, <span class="st" style="color: #20794D;">"__deepcopy__"</span>, <span class="va" style="color: #111111;">None</span>)</span>
<span id="cb7-18">            <span class="cf" style="color: #003B4F;">if</span> copier <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb7-19">                y <span class="op" style="color: #5E5E5E;">=</span> copier(memo)</span>
<span id="cb7-20">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-21">                ... <span class="co" style="color: #5E5E5E;"># skip irrelevant code</span></span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;"># If is its own copy, don't memoize.</span></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;">if</span> y <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> x:</span>
<span id="cb7-25">        memo[d] <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb7-26">        _keep_alive(x, memo) <span class="co" style="color: #5E5E5E;"># Make sure x lives at least as long as d</span></span>
<span id="cb7-27">    <span class="cf" style="color: #003B4F;">return</span> y</span></code></pre></div>
<p>In particular, line 17 is what we care.<br>
<code>copier = getattr(x, "__deepcopy__", None)</code></p>
<p>If a particular class has implement the <code>__deepcopy__</code> method, <code>deepcopy</code> will try to invoke that instead of the standard copy. The following dummy class should illustrate this clearly.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">class</span> DummyClass():</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;">def</span> __deepcopy__(<span class="va" style="color: #111111;">self</span>, _):</span>
<span id="cb8-3">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Just hanging around and not copying.'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">o <span class="op" style="color: #5E5E5E;">=</span> DummyClass()</span>
<span id="cb9-2">deepcopy(o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Just hanging around and not copying.</code></pre>
</div>
</div>
<p>a lightgbm model is actually a <code>Booster</code> object and implement its own <code>__deepcopy__</code>. It only copy the model string but nothing else, this explains why <code>deepcopy(lgbm).paramters</code> is an empty dictionary.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"> <span class="kw" style="color: #003B4F;">def</span> __deepcopy__(<span class="va" style="color: #111111;">self</span>, _): </span>
<span id="cb11-2">     model_str <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.model_to_string(num_iteration<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) </span>
<span id="cb11-3">     booster <span class="op" style="color: #5E5E5E;">=</span> Booster(model_str<span class="op" style="color: #5E5E5E;">=</span>model_str) </span>
<span id="cb11-4">     <span class="cf" style="color: #003B4F;">return</span> booster </span></code></pre></div>
<p>Reference: https://github.com/microsoft/LightGBM/blob/d6ebd063fff7ff9ed557c3f2bcacc8f9456583e6/python-package/lightgbm/basic.py#L2279-L2282</p>
<p>Okay, so why <code>lightgbm</code> need to have an custom implementation? I thought this is a bug, but turns out there are some deeper reason behind this. I created an issue on GitHub.</p>
<p>https://github.com/microsoft/LightGBM/issues/4085 Their response is &gt; Custom <strong>deepcopy</strong> is needed to make <code>Booster</code> class picklable.</p>
</section>
<section id="italian-bmt-lettuce-tomato-and-some-pickles-please" class="level2">
<h2 class="anchored" data-anchor-id="italian-bmt-lettuce-tomato-and-some-pickles-please">🥖Italian BMT, 🥬Lettuce 🍅 tomato and some 🥒pickles please</h2>
<p>What does <code>pickle</code> really is? and what makes an object <code>pickable</code>?</p>
<blockquote class="blockquote">
<p>Python Pickle is used to serialize and deserialize a python object structure. Any object on python can be pickled so that it can be saved on disk.</p>
</blockquote>
<p>Serialization roughly means translating the data in memory into a format that can be stored on disk or sent over network. It’s like ordering a chair from Ikea, they will send you a box, but not a chair.</p>
<p>The process of decomposing the chair and put it into a box is <code>serialization</code>, while putting it together is <code>deserialization</code>. With pickle terms, we called it <code>Pickling</code> and <code>Unpickling</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/serialize.jpg" title="Putting the chair together is `deseralization`, decomposing the chair and make it packable in a box is `serialization`" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">deserialize and serialize</figcaption><p></p>
</figure>
</div>
<section id="what-is-pickle" class="level3">
<h3 class="anchored" data-anchor-id="what-is-pickle">What is Pickle</h3>
<p><code>Pickle</code> is a protocol for <strong>Python</strong>, you and either pickling a Python object to memory or to file.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;">import</span> pickle</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">d <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'a'</span>: <span class="dv" style="color: #AD0000;">1</span>}</span>
<span id="cb13-2">pickle_d <span class="op" style="color: #5E5E5E;">=</span> pickle.dumps(d)</span>
<span id="cb13-3">pickle_d</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>b'\x80\x04\x95\n\x00\x00\x00\x00\x00\x00\x00}\x94\x8c\x01a\x94K\x01s.'</code></pre>
</div>
</div>
<p>The python dict is now transfrom into a series of binary str, this string can be only understand by Python. We can also deserialize a binary string back to a python dict.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">binary_str <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">b'</span><span class="ch" style="color: #20794D;">\x80\x04\x95\n\x00\x00\x00\x00\x00\x00\x00</span><span class="st" style="color: #20794D;">}</span><span class="ch" style="color: #20794D;">\x94\x8c\x01</span><span class="st" style="color: #20794D;">a</span><span class="ch" style="color: #20794D;">\x94</span><span class="st" style="color: #20794D;">K</span><span class="ch" style="color: #20794D;">\x01</span><span class="st" style="color: #20794D;">s.'</span></span>
<span id="cb15-2">pickle.loads(binary_str)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>{'a': 1}</code></pre>
</div>
</div>
<p>Reference: https://www.python.org/dev/peps/pep-0574/#:~:text=The%20pickle%20protocol%20was%20originally%20designed%20in%201995,copying%20temporary%20data%20before%20writing%20it%20to%20disk.</p>
</section>
<section id="what-makes-something-picklable" class="level3">
<h3 class="anchored" data-anchor-id="what-makes-something-picklable">What makes something picklable</h3>
<p>Finally, we come back to our initial questions. &gt; What makes something picklable? Why lightgbm need to have <code>deepcopy</code> to make the <code>Booster</code> class picklable?</p>
<blockquote class="blockquote">
<p>What can be pickled and unpickled? The following types can be pickled:<br>
* None, True, and False<br>
* integers, floating point numbers, complex numbers<br>
* strings, bytes, bytearrays<br>
* tuples, lists, sets, and dictionaries containing only picklable objects<br>
* functions defined at the top level of a module (using def, not lambda)<br>
* built-in functions defined at the top level of a module<br>
* classes that are defined at the top level of a module</p>
</blockquote>
<p>So pretty much common datatype, functions and classes are picklable. Let’s see without <code>__deepcopy__</code>, the <code>Booster</code> class is not serializable as it claims.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">import</span> lightgbm</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">from</span> lightgbm <span class="im" style="color: #00769E;">import</span> Booster</span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;">del</span> Booster.__deepcopy__</span>
<span id="cb17-4"></span>
<span id="cb17-5">params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb17-6"><span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'regression'</span>,</span>
<span id="cb17-7"><span class="st" style="color: #20794D;">'verbose'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb17-8"><span class="st" style="color: #20794D;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb17-9">}</span>
<span id="cb17-10"></span>
<span id="cb17-11">X <span class="op" style="color: #5E5E5E;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb17-12">Y <span class="op" style="color: #5E5E5E;">=</span> np.ravel(np.random.rand(<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb17-13">lgbm <span class="op" style="color: #5E5E5E;">=</span> lgb.train(params, lgb.Dataset(X,label<span class="op" style="color: #5E5E5E;">=</span>Y),num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"></span>
<span id="cb17-16">deepcopy_lgbm <span class="op" style="color: #5E5E5E;">=</span> deepcopy(lgbm)</span>
<span id="cb17-17">lgbm.params, deepcopy_lgbm.params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>({'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None},
 {'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None})</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">pickle.dumps(deepcopy_lgbm) <span class="op" style="color: #5E5E5E;">==</span> pickle.dumps(lgbm)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">unpickle_model <span class="op" style="color: #5E5E5E;">=</span> pickle.loads(pickle.dumps(deepcopy_lgbm))</span>
<span id="cb21-2">unpickle_deepcopy_model <span class="op" style="color: #5E5E5E;">=</span> pickle.loads(pickle.dumps(lgbm))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">unpickle_model.params, unpickle_deepcopy_model.params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>({'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None},
 {'objective': 'regression',
  'verbose': -1,
  'num_leaves': 3,
  'num_iterations': 1,
  'early_stopping_round': None})</code></pre>
</div>
</div>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">unpickle_model.model_to_string() <span class="op" style="color: #5E5E5E;">==</span> unpickle_deepcopy_model.model_to_string()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>True</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="82">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">unpickle_deepcopy_model.predict(X)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>array([0.48439803, 0.48439803, 0.50141491, 0.48439803, 0.48439803,
       0.48439803, 0.50141491, 0.48439803, 0.48439803, 0.48439803,
       0.49029787, 0.49029787, 0.48439803, 0.48439803, 0.48439803,
       0.49029787, 0.48439803, 0.50141491, 0.50141491, 0.50141491,
       0.48439803, 0.50141491, 0.48439803, 0.49029787, 0.50141491,
       0.50141491, 0.48439803, 0.49029787, 0.49029787, 0.49029787,
       0.49029787, 0.50141491, 0.48439803, 0.50141491, 0.48439803,
       0.49029787, 0.50141491, 0.48439803, 0.48439803, 0.48439803,
       0.48439803, 0.50141491, 0.50141491, 0.48439803, 0.49029787,
       0.48439803, 0.48439803, 0.50141491, 0.48439803, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.48439803, 0.50141491,
       0.49029787, 0.48439803, 0.50141491, 0.49029787, 0.49029787,
       0.50141491, 0.50141491, 0.48439803, 0.50141491, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.50141491, 0.48439803,
       0.48439803, 0.50141491, 0.50141491, 0.49029787, 0.50141491,
       0.48439803, 0.49029787, 0.48439803, 0.48439803, 0.50141491,
       0.50141491, 0.48439803, 0.49029787, 0.48439803, 0.48439803,
       0.50141491, 0.49029787, 0.50141491, 0.50141491, 0.49029787,
       0.48439803, 0.49029787, 0.48439803, 0.48439803, 0.48439803,
       0.48439803, 0.48439803, 0.48439803, 0.50141491, 0.49029787])</code></pre>
</div>
</div>
</section>
<section id="last-word" class="level3">
<h3 class="anchored" data-anchor-id="last-word">Last Word</h3>
<p>Well…. It seems actually picklable? I may need to investigate the issue a bit more. For now, the <code>__deepcopy__</code> does not seems to be necessary.</p>
<p>I tried to dig into <code>lightgbm</code> source code and find this potential related issue. https://github.com/microsoft/LightGBM/blame/dc1bc23adf1137ef78722176e2da69f8411b1feb/python-package/lightgbm/basic.py#L2298</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>pickle</category>
  <category>deepcopy</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-03-19-deepcopy-lightgbm-and-🥒pickles.html</guid>
  <pubDate>Fri, 19 Mar 2021 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/serialize.jpg " medium="image"/>
</item>
<item>
  <title>Data Test as CI</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-03-17-pytest-data-test-truncated-error.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>I am running test with <code>great_expectations</code> that validate data in UAT and production server with CI, so it would be nice if the log can capture this.</p>
<p>I created a custom error class that would do the job, however, <code>pytest</code> truncated my <code>AssertionError</code> since it is quite long.</p>
<p>I am using pytest magic from https://github.com/akaihola/ipython_pytest which allow me to run pytest in a Jupyter notebook cell.</p>
<p>It is quite simple with a few tens of lines.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> shlex</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> tempfile</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> IPython.core <span class="im" style="color: #00769E;">import</span> magic</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> pytest <span class="im" style="color: #00769E;">import</span> main <span class="im" style="color: #00769E;">as</span> pytest_main</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11">TEST_MODULE_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'_ipytesttmp'</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;">def</span> pytest(line, cell):</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">with</span> tempfile.TemporaryDirectory() <span class="im" style="color: #00769E;">as</span> root:</span>
<span id="cb1-15">        oldcwd <span class="op" style="color: #5E5E5E;">=</span> os.getcwd()</span>
<span id="cb1-16">        os.chdir(root)</span>
<span id="cb1-17">        tests_module_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">.py'</span>.<span class="bu" style="color: null;">format</span>(TEST_MODULE_NAME)</span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb1-19">            Path(tests_module_path).write_text(cell)</span>
<span id="cb1-20">            args <span class="op" style="color: #5E5E5E;">=</span> shlex.split(line)</span>
<span id="cb1-21">            os.environ[<span class="st" style="color: #20794D;">'COLUMNS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'80'</span></span>
<span id="cb1-22">            pytest_main(args <span class="op" style="color: #5E5E5E;">+</span> [tests_module_path])</span>
<span id="cb1-23">            <span class="cf" style="color: #003B4F;">if</span> TEST_MODULE_NAME <span class="kw" style="color: #003B4F;">in</span> sys.modules:</span>
<span id="cb1-24">                <span class="kw" style="color: #003B4F;">del</span> sys.modules[TEST_MODULE_NAME]</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb1-26">            os.chdir(oldcwd)</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;">def</span> load_ipython_extension(ipython):</span>
<span id="cb1-29">    magic.register_cell_magic(pytest)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Writing ipython_pytest.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># !pip install pytest</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The ipython_pytest extension is already loaded. To reload it, use:
  %reload_ext ipython_pytest</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> test_long_assertion_error():</span>
<span id="cb5-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"placeholder"</span></span>
<span id="cb5-3">    expect <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"abcdefg</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span> <span class="co" style="color: #5E5E5E;"># Long string</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;">assert</span> x <span class="op" style="color: #5E5E5E;">==</span> expect</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.3, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: C:\Users\channo\AppData\Local\Temp\tmpohw9e_9w
collected 1 item

_ipytesttmp.py F                                                         [100%]

================================== FAILURES ===================================
__________________________ test_long_assertion_error __________________________

    def test_long_assertion_error():
        x = "placeholder"
        expect = "abcdefg\n"*20 # Long string
&gt;       assert x == expect
E       AssertionError: assert 'placeholder' == 'abcdefg\nabc...fg\nabcdefg\n'
E         + placeholder
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg...
E         
E         ...Full output truncated (15 lines hidden), use '-vv' to show

_ipytesttmp.py:5: AssertionError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_long_assertion_error - AssertionError: assert 'pl...
============================== 1 failed in 0.06s ==============================</code></pre>
</div>
</div>
<p>You can see that pytest truncated my error with <code>...</code> Here is how I solve ths issue</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> test_long_assertion_error():</span>
<span id="cb7-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"placeholder"</span></span>
<span id="cb7-3">    expect <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"abcdefg</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">20</span> <span class="co" style="color: #5E5E5E;"># Long string</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;">assert</span> x <span class="op" style="color: #5E5E5E;">==</span> expect</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.3, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- c:\programdata\miniconda3\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\channo\AppData\Local\Temp\tmpyic4vcra
collecting ... collected 1 item

_ipytesttmp.py::test_long_assertion_error FAILED                         [100%]

================================== FAILURES ===================================
__________________________ test_long_assertion_error __________________________

    def test_long_assertion_error():
        x = "placeholder"
        expect = "abcdefg\n"*20 # Long string
&gt;       assert x == expect
E       AssertionError: assert 'placeholder' == ('abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n'\n 'abcdefg\n')
E         + placeholder
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg
E         - abcdefg

_ipytesttmp.py:5: AssertionError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_long_assertion_error - AssertionError: assert 'pl...
============================== 1 failed in 0.06s ==============================</code></pre>
</div>
</div>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-03-17-pytest-data-test-truncated-error.html</guid>
  <pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up pyodbc for Impala connection, works on both Linux and Window</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2021-03-05-pyodbc-linux.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Long story short, connect with Impala is a big headache in Windows. <code>pyhive</code>, <code>impyla</code> are both buggy. At the end, I stick with <code>pyodbc</code> as it works on both Linux and Windows, and seems to have better performance. There are not many steps, but it would be tricky if you try to Google as there are not much guide that just work out of the box</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>First, you need to download the ODBC driver from <a href="https://www.cloudera.com/downloads/connectors/impala/odbc/2-6-11.html">Cloudera</a>.</p>
<p>Then you need to instsall the driver properly.</p>
<pre><code>dpkg -i docker/clouderaimpalaodbc_2.6.10.1010-2_amd64.deb</code></pre>
<p>Add this file to the directory /etc/odbcinst.ini, if you already have add, append this to the file.</p>
<pre><code># /etc/odbcinst.ini
[ODBC Drivers]
Cloudera Impala ODBC Driver 32-bit=Installed
Cloudera Impala ODBC Driver 64-bit=Installed
[Cloudera Impala ODBC Driver 32-bit]
Description=Cloudera Impala ODBC Driver (32-bit)
Driver=/opt/cloudera/impalaodbc/lib/32/libclouderaimpalaodbc32.so
[Cloudera Impala ODBC Driver 64-bit]
Description=Cloudera Impala ODBC Driver (64-bit)
Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so</code></pre>
<p>Then install some additional package.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">apt-get</span> update <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install gnupg apt-transport-https</span>
<span id="cb3-2"><span class="ex" style="color: null;">apt-get</span> update <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install libssl1.0.0 unixodbc unixodbc-dev <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="va" style="color: #111111;">ACCEPT_EULA</span><span class="op" style="color: #5E5E5E;">=</span>Y <span class="ex" style="color: null;">apt-get</span> <span class="at" style="color: #657422;">-y</span> install msodbcsql17</span>
<span id="cb3-4"><span class="ex" style="color: null;">apt-get</span> install unixodbc-dev <span class="at" style="color: #657422;">-y</span></span></code></pre></div>
<p>Last, <code>pip install pyodbc</code> and have fun.</p>
<p>To read a database table, you can simply do this.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pyodbc</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb4-3"></span>
<span id="cb4-4">conn <span class="op" style="color: #5E5E5E;">=</span> pyodbc.<span class="ex" style="color: null;">connect</span>(<span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb4-5"><span class="ss" style="color: #20794D;">Driver=Cloudera ODBC Driver for Impala 64-bit; </span></span>
<span id="cb4-6"><span class="ss" style="color: #20794D;">PWD=password;</span></span>
<span id="cb4-7"><span class="ss" style="color: #20794D;">UID=username;</span></span>
<span id="cb4-8"><span class="ss" style="color: #20794D;">Database=database</span></span>
<span id="cb4-9"><span class="ss" style="color: #20794D;">"""</span>)</span></code></pre></div>
<p>There are multiple way to connect, but I found using a connection string is the most straight forward solution that does not require any additional enviornment variable setup.</p>


</section>

 ]]></description>
  <category>pyodbc</category>
  <category>impala</category>
  <guid>https://noklam.github.io/blog/blog/posts/2021-03-05-pyodbc-linux.html</guid>
  <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Create python command line in few lines, and use it anywhere as a standalone tool!</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2020-12-10-typer-create-command-line-and-use-it-anywhere.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>The <code>Typer</code> documentation has great example explaining how to use it. This is the example copied from their GitHub homepage. https://github.com/tiangolo/typer.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> main(name: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb1-5">    typer.echo(<span class="ss" style="color: #20794D;">f"Hello </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb1-9">    typer.run(main)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting main1.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">!</span>python main1.py world</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;">!</span>python main1.py <span class="op" style="color: #5E5E5E;">--</span><span class="bu" style="color: null;">help</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: main1.py [OPTIONS] NAME

Arguments:
  NAME  [required]

Options:
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.

  --help                          Show this message and exit.</code></pre>
</div>
</div>
<p>Here I write a new file to <code>main1.py</code> and execute it as a command line with just 5 lines of code. It always comes with a help message for free. Let’s see another example.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb7-2"></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">def</span> main(name: <span class="bu" style="color: null;">str</span>, age: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span>, height_meters: <span class="bu" style="color: null;">float</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.89</span>, female: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>):</span>
<span id="cb7-5">    typer.echo(<span class="ss" style="color: #20794D;">f"NAME is </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(name)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-6">    typer.echo(<span class="ss" style="color: #20794D;">f"--age is </span><span class="sc" style="color: #5E5E5E;">{</span>age<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(age)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-7">    typer.echo(<span class="ss" style="color: #20794D;">f"--height-meters is </span><span class="sc" style="color: #5E5E5E;">{</span>height_meters<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(height_meters)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-8">    typer.echo(<span class="ss" style="color: #20794D;">f"--female is </span><span class="sc" style="color: #5E5E5E;">{</span>female<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, of type: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">type</span>(female)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb7-12">    typer.run(main)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Writing main2.py</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;">!</span>python main2.py <span class="op" style="color: #5E5E5E;">--</span><span class="bu" style="color: null;">help</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: main2.py [OPTIONS] NAME

Arguments:
  NAME  [required]

Options:
  --age INTEGER                   [default: 20]
  --height-meters FLOAT           [default: 1.89]
  --female / --no-female          [default: True]
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.

  --help                          Show this message and exit.</code></pre>
</div>
</div>
<p>This time, we can see that the help message even supplement the expected datatype. <code>Typer</code> will validate the type and conevrt it when possible.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">!</span>python main2.py Nok <span class="op" style="color: #5E5E5E;">--</span>age<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NAME is Nok, of type: &lt;class 'str'&gt;
--age is 3, of type: &lt;class 'int'&gt;
--height-meters is 1.89, of type: &lt;class 'float'&gt;
--female is True, of type: &lt;class 'bool'&gt;</code></pre>
</div>
</div>
<p>The command line works file, but it only works in the same directory, and you always have to type the keyword <code>python</code>. With python setuptools, we can actually installed a command line and run it anywhere. It is pretty easy with just 1 trick, let’s go back to the simple Hello command.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">import</span> typer</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">def</span> hello(name:<span class="bu" style="color: null;">str</span>):</span>
<span id="cb13-4">    typer.echo(<span class="ss" style="color: #20794D;">f"Hello </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb13-5">    </span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb13-7">    typer.run(hello)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting main3.py</code></pre>
</div>
</div>
<p>Here we made a few changes. 1. The logic is move to a new function named <code>hello</code> 2. We removed the __main__ part, as we will not call this python file directly anymore. 3. <code>typer.run(main)</code> is changed to <code>typer.run(hello)</code> and moved inside the <code>main</code> function.</p>
<section id="console-script" class="level1">
<h1>Console Script</h1>
<p>We will use setuptool to build console script, which may call the function <code>main</code>. The magic is using console script to install a command line interface (It creates a .exe file) that can be run anywhere. We can name our command line instead of using the filename with a pattern of <code>command_name=file:func_name</code>. Here our function <code>main</code> is inside a file <code>main3.py</code>, so we use <code>hello=main3:main</code>.</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">from</span> setuptools <span class="im" style="color: #00769E;">import</span> setup, find_packages</span>
<span id="cb15-2"></span>
<span id="cb15-3"></span>
<span id="cb15-4">setup(</span>
<span id="cb15-5">    name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"my_library"</span>,</span>
<span id="cb15-6">    version<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"1.0"</span>,</span>
<span id="cb15-7">    packages<span class="op" style="color: #5E5E5E;">=</span>find_packages(),</span>
<span id="cb15-8">        entry_points <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb15-9">        <span class="st" style="color: #20794D;">'console_scripts'</span>: [<span class="st" style="color: #20794D;">'hello=main3:main'</span>]}</span>
<span id="cb15-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting setup.py</code></pre>
</div>
</div>
<p>Then we install the console script .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">!</span>python setup.py develop</span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">!</span>hello world</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello world</code></pre>
</div>
</div>
<p>We can now call <code>hello</code> anywhere, as it is installed as a executable.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">!</span>where hello</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C:\ProgramData\Miniconda3\Scripts\hello.exe</code></pre>
</div>
</div>
<p>It’s time for you to build your own commands. This can be easily extended to support multiple commands. https://github.com/tiangolo/typer</p>


</section>

 ]]></description>
  <category>python</category>
  <category>cli</category>
  <category>typer</category>
  <guid>https://noklam.github.io/blog/blog/posts/2020-12-10-typer-create-command-line-and-use-it-anywhere.html</guid>
  <pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Kedro - pipeline for data science</title>
  <dc:creator>noklam</dc:creator>
  <link>https://noklam.github.io/blog/blog/posts/2020-12-04-kedro-pipeline.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="why-we-need-a-pipeline-tool" class="level1">
<h1>Why we need a pipeline tool</h1>
<p>Data Scientist often starts their development with a Jupyter Notebook. As the notebook grows larger, it’s inevitable to convert it to a python script. It starts with one file, then another one, and it accumulates quickly. Converting a notebook could be more than just pasting the code in a script. It involves careful thinking and refactoring.</p>
<p>A pipeline library can be helpful in a few ways: - modular pipeline, it can be executed partially. - easily run in parallel - check for loop dependecies</p>
<section id="what-is-kedro" class="level2">
<h2 class="anchored" data-anchor-id="what-is-kedro">What is Kedro</h2>
<p>Kedro is a development workflow tool that allows you to create portable data pipelines. It applies software engineering best practices to make your data science code reproducible, modular and well-documented. For example, you can easily create a template for new projects, build a documentation site, lint your code and always have an expected structure to find your config and data.</p>
<blockquote class="blockquote">
<p>Kedro is a lightweight pipeline library without need to setup infracstructure.</p>
</blockquote>
<p>In comparison to Airflow or Luigi, Kedro is much more lightweighted. It helps you to write production-ready code, and let data engineer and data scientist work together with the same code base. It also has good Jupyter support, so data scientist can still use the tool that they are familiar with.</p>
<p>Functions and Pipeline</p>
<section id="nodes" class="level3">
<h3 class="anchored" data-anchor-id="nodes">Nodes</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> split_data(data: pd.DataFrame, example_test_data_ratio: <span class="bu" style="color: null;">float</span>):</span>
<span id="cb1-2">    ...</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb1-4">        train_x<span class="op" style="color: #5E5E5E;">=</span>train_data_x,</span>
<span id="cb1-5">        train_y<span class="op" style="color: #5E5E5E;">=</span>train_data_y,</span>
<span id="cb1-6">        test_x<span class="op" style="color: #5E5E5E;">=</span>test_data_x,</span>
<span id="cb1-7">        test_y<span class="op" style="color: #5E5E5E;">=</span>test_data_y,</span>
<span id="cb1-8">    )</span></code></pre></div>
<p><code>Node</code> is the core component of kedro <code>Pipeline</code>. For example, we have a python function that split data into train/test set. A node take 4 arguments. <code>func</code>, <code>inputs</code>, <code>outputs</code>, <code>name</code>. To use this function as a node, we would write something like this.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">node(split_data, inputs<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb2-3">                outputs<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb2-4">                train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb2-5">                train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb2-6">                test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb2-7">                test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb2-8">                ),</span>
<span id="cb2-9">         name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"split_data"</span>)</span></code></pre></div>
<p>It’s fairly simple, and it resemble the original function. The only significant difference is, <code>split_data</code> takes a <code>df</code> and <code>float</code>, but in our nodes, it becomes a list of strings. I will explain it in <strong>Section 3.2</strong>.</p>
</section>
<section id="pipeline" class="level3">
<h3 class="anchored" data-anchor-id="pipeline">Pipeline</h3>
<p>Pipeline is nothing more than a list of <code>Node</code>, it helps you to reuse nodes for different pipelines</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Pipeline([ṅode(),</span>
<span id="cb3-2">         [node(),</span>
<span id="cb3-3">            ...]])</span></code></pre></div>
<p>Here is an simple <code>Pipeline</code> which does splitting data, train a model, make predictions, and report metrics.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> create_pipeline(<span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;">return</span> Pipeline(</span>
<span id="cb4-3">        [</span>
<span id="cb4-4">            node(</span>
<span id="cb4-5">                split_data,</span>
<span id="cb4-6">                [<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb4-7">                <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb4-8">                    train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb4-9">                    train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb4-10">                    test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb4-11">                    test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb4-12">                ),</span>
<span id="cb4-13">            ),</span>
<span id="cb4-14">            node(</span>
<span id="cb4-15">                train_model,</span>
<span id="cb4-16">                [<span class="st" style="color: #20794D;">"example_train_x"</span>, <span class="st" style="color: #20794D;">"example_train_y"</span>, <span class="st" style="color: #20794D;">"parameters"</span>],</span>
<span id="cb4-17">                <span class="st" style="color: #20794D;">"example_model"</span>,</span>
<span id="cb4-18">            ),</span>
<span id="cb4-19">            node(</span>
<span id="cb4-20">                predict,</span>
<span id="cb4-21">                <span class="bu" style="color: null;">dict</span>(model<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_model"</span>, test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>),</span>
<span id="cb4-22">                <span class="st" style="color: #20794D;">"example_predictions"</span>,</span>
<span id="cb4-23">            ),</span>
<span id="cb4-24">            node(report_accuracy, [<span class="st" style="color: #20794D;">"example_predictions"</span>, <span class="st" style="color: #20794D;">"example_test_y"</span>], <span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'report1'</span>),</span>
<span id="cb4-25">            node(report_accuracy, [<span class="st" style="color: #20794D;">"example_predictions"</span>, <span class="st" style="color: #20794D;">"example_test_y"</span>], <span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'report2'</span>),</span>
<span id="cb4-26">        ]</span>
<span id="cb4-27">    )</span></code></pre></div>
<p>You can also use <strong>node tags</strong> or writing different defined pipeline to reuse your node easily.</p>
</section>
<section id="kedro-viz" class="level3">
<h3 class="anchored" data-anchor-id="kedro-viz">Kedro Viz</h3>
<p>Internally, Kedro always form a <strong>graph</strong> for your entire pipelines, which can be visaulized with this command.</p>
<p><code>kedro viz</code></p>
<p>This starts a web server that visualizes the dependencies of your function, parameters and data,you can also filter some nodes of function with the UI.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/kedro_viz.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">viz</figcaption><p></p>
</figure>
</div>
</section>
<section id="kedro-run-partial-pipeline-parallel-execution" class="level3">
<h3 class="anchored" data-anchor-id="kedro-run-partial-pipeline-parallel-execution">Kedro Run, partial pipeline, parallel execution</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://noklam.github.io/blog/blog/posts/images/graph.jpg" title="A simple pipeline graph" class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
<p>You can execute your pipeline partially with this command. This with execute your pipeline from A to C except the last Node D.</p>
<p><code>kedro run --from-nodes="A, B, C"</code></p>
<p>If you pay attention to this graph, Node B and Node C has no dependency, they only depend on Node A. With kedro, you can parallelize this execution for free by using this command.</p>
<p><code>kedro run --parallel</code></p>
</section>
<section id="functional-programming" class="level3">
<h3 class="anchored" data-anchor-id="functional-programming">Functional programming</h3>
<p>Now, you have basic understand of what is <code>Node</code> and <code>Pipeline</code>, you also learnt that you can use <code>kedro run</code> command to execute your pipeline with different options. Before I jump into other <code>kedro</code> features, let me explain a bit more about <strong>functional programming</strong>. This concept is at the heart of data processing library like <code>spark</code>.</p>
<p>Functional programming, means using functions to program literally. It may sounds silly, but bear with me.</p>
<p><strong>Pure Function</strong> has these characteristics: 1. No side effect, it won’t change state outside of the function scope. 2. If you repeating running the same function with same input(argument), it should give you the same output. 3. Easy to parallel if there is no data dependency</p>
<p>Consider this simple function that add 1 to your input:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> func1(x):</span>
<span id="cb5-3">    x<span class="op" style="color: #5E5E5E;">=</span>x<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">def</span> func2(x):</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">var1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-2">var2 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5">func1(var1) <span class="co" style="color: #5E5E5E;"># var1=2</span></span>
<span id="cb6-6">func2(var2) <span class="co" style="color: #5E5E5E;"># var2=2</span></span></code></pre></div>
<p>They both add 1 to your input, so which version is a better function?</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">func1(var1) <span class="co" style="color: #5E5E5E;"># var1=3</span></span>
<span id="cb7-2">func2(var2) <span class="co" style="color: #5E5E5E;"># var2=2    </span></span></code></pre></div>
<p>Now consider if we run this function twice. <code>func1</code> changes the result to 3, while <code>func2</code> still give you 2. I argue <code>func2</code> is better in this case.</p>
<p>Why does this matter? Or how is it going to be useful at all? Well, it makes debugging much easier. It is because you only need to debug code inside a function, not 200 lines of code before it. This greatly reduce the complexity that you have to worried about your data. This fundamental principle is what powering the pipeline, and the reason why you can just use <code>kedro run --parallel</code> to parallelize some computation.</p>
<p>It will also be easier to write test for function. <code>func1</code> is harder to test, because you need to consider all possible code path. You may end up need to write verbose test cases like this.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> test_case1():</span>
<span id="cb8-2">    func_A()</span>
<span id="cb8-3">    func_B()</span>
<span id="cb8-4">    </span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">def</span> test_case2():</span>
<span id="cb8-6">    func_A()</span>
<span id="cb8-7">    func_A()</span>
<span id="cb8-8">    func_B()</span></code></pre></div>
<p>How does using Kedro helps to achieve this? Think about <code>func1</code>, if it is written as a <code>Node</code>, it will look like this.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">Node(func1, inputs<span class="op" style="color: #5E5E5E;">=</span>var1, output<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"func1"</span>)</span></code></pre></div>
<p>Since it is a Node without any output, it will have no impact to the downstreams. In order to use that variable, you will naturally writing code looks more like <code>func2</code> instead.</p>
<p>Let’s look at one more example.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">k <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> func3(x):</span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;">return</span> x<span class="op" style="color: #5E5E5E;">+</span>k</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">func3(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>20</code></pre>
</div>
</div>
<p>Now consider <code>func3</code>, it is a valid Python function. You can run it in a notebook or in a script, but it wouldn’t be possible for a Node, sinec a Node only have access to its input. It will just throw an error to you immediately.</p>
<pre class="pyton"><code>node(func3, inputs='x', outputs='some_result', name='func3')</code></pre>
<p>By writing nodes, you limit your function to only access variable within its scope. It helps to prevent a lot of bug.</p>
</section>
<section id="decompose-program-to-pipeline-is-not-just-copy-and-paste" class="level3">
<h3 class="anchored" data-anchor-id="decompose-program-to-pipeline-is-not-just-copy-and-paste">Decompose program to pipeline is not just copy and paste</h3>
<p>I hope the examples demonstrate how writing nodes help transform your code towards functional style. In reality, decoupling your functions from a programming is not straight forward.</p>
<p>Consider this example. <img src="https://noklam.github.io/blog/blog/posts/images/nan.jpg" class="img-fluid" alt="na"></p>
<p>Look at how data <code>np.nan</code> is changed. This wouldn’t be a problem if we have one program, since we will just passing all variable in memroy, without the step that writing and reading from a file.</p>
<p>Error like these are subtle and dangerous, it may not throw error, but ruining our features quality. We have better chance to catch these error in a small program, but it would be much harder to isolate the issue if we have 1000 lines of code. The sooner you integrate it into your pipeline, the easier the integration is. In fact, we can do better. We could introduce test case for validating data, I would explain more in <strong>Section 3.5</strong>.</p>
</section>
</section>
<section id="data-catalog-paramaeters" class="level2">
<h2 class="anchored" data-anchor-id="data-catalog-paramaeters">Data Catalog &amp; Paramaeters</h2>
<p><img src="https://noklam.github.io/blog/blog/posts/images/catalog.jpg" title="Supported integration" class="img-fluid" alt="catalog"> Data Catalog is an API for Dataset. It includes a Data Model from from raw data, feature, to reporting layer and a standard Data I/O API. It integrates with pandas, spark, SQLAlchemy and Cloud Storage.</p>
<p>To use Data Catalog, you would first need to define your dataset in the <code>catalog.yml</code>. You will have give it a <code>name</code> and <code>type</code>, denoting whether it is a SQL query or a CSV. Optionally, you can pass in any arguments that are supported from the underlying API as well.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="fu" style="color: #4758AB;">example_iris_data</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb14-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> pandas.CSVDataSet</span></span>
<span id="cb14-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filepath</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> data/01_raw/iris.csv</span></span></code></pre></div>
<section id="connect-data-catalog-with-node" class="level3">
<h3 class="anchored" data-anchor-id="connect-data-catalog-with-node">Connect Data Catalog with Node</h3>
<p>Let’s reuse our <code>split_data</code> function. When you create a node that using the <code>split_data</code> function, you would pass in the string of the dataset instead of an actual dataframe, the Reading/Writing operation is handled by Kedro, so you don’t have to write to_csv() or read_csv() yourself.</p>
<p><code>parameters.yml</code></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="fu" style="color: #4758AB;">example_test_data_ratio</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="fl" style="color: #AD0000;">0.2</span></span></code></pre></div>
<p>A node using the <code>split_data</code> function.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">node(split_data, inputs<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"example_iris_data"</span>, <span class="st" style="color: #20794D;">"params:example_test_data_ratio"</span>],</span>
<span id="cb16-3">                outputs<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(</span>
<span id="cb16-4">                train_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_x"</span>,</span>
<span id="cb16-5">                train_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_train_y"</span>,</span>
<span id="cb16-6">                test_x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_x"</span>,</span>
<span id="cb16-7">                test_y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"example_test_y"</span>,</span>
<span id="cb16-8">                ),</span>
<span id="cb16-9">         name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"split_data"</span>)</span></code></pre></div>
<p>Here the inputs “example_iris_data” is refering to a dataset defined by <code>catalog.yml</code>, kedro will load the csv for you. Same applies for <code>params:example_test_data_ratio</code>.</p>
<p>By using <code>catalog</code> and <code>parmaeters</code>, it already makes your program cleaner. You now have a single file to manager all data source, and a single file contains all parameters, which is configurable. Your functions now is parameterized, you can simply change configuration in a single file without going into every possible script to change a number.</p>
<p>Data Catalog abstract away the Data I/O logic from the data processing function.</p>
<p>It process data and write a file.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> process_data(df):</span>
<span id="cb17-2">    ... <span class="co" style="color: #5E5E5E;"># do some processing</span></span>
<span id="cb17-3">    df.to_csv(<span class="st" style="color: #20794D;">'xxx.csv'</span>)</span></code></pre></div>
<p>It only process data</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> process_data(df):</span>
<span id="cb18-2">    ... <span class="co" style="color: #5E5E5E;">#do some processing</span></span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
<p>This applies the <strong>single-responsibility principle&nbsp;(SRP)</strong>, meaning that your function is only doing one thing at a time. There are many benefits from it, for example, it makes data versioning easier. I will explain this in <strong>Section 3.3</strong>.</p>
</section>
<section id="memory-dataset-optional-to-skip" class="level3">
<h3 class="anchored" data-anchor-id="memory-dataset-optional-to-skip">Memory Dataset (optional to skip)</h3>
<p>Remember our we pass in a string to our node, and it will look for the corresponding dataset? What if we do not define it? It could be a lot of work if we need to define everything. Besides, some variable are not needed to be written out as a file, it could just stay as in memory.</p>
<p>In fact, kedro use <code>MemroyDataset</code> by default. Which means you could simply pass in a string that is not defined, the string will be use as the name of the variable. There are more useful dataset like <code>CacheDataset</code>, you can find more details in this link.</p>
<p>https://kedro.readthedocs.io/en/stable/kedro.extras.datasets.html</p>
<p>p.s. When using kedro pipeline, you only define the node’s inputs and outputs, but you never defined the order of execution. From my experience, there are pros and cons. The benefits is, your code is less coupled, and due to this, kedro is able to execute your pipeline in parallel whenever possible to speed up your program. However, it means the order of execution is not guaranteed, this may cause unexpected effect. For example, if you are training a machine learning model, it is common to set a random seed at the beginning. Due to the randomness of execution, you may not get identical result, as the order of execution is different everytime, thus the sequence of the random number used is random too. In general this is not a big problem, but if you have a strong need to make sure you have identical output (e.g.&nbsp;regression test), it may cause some trouble and you need to use dummy input and output to force kedro run your pipeline in a specific order.</p>


</section>
</section>
</section>

 ]]></description>
  <guid>https://noklam.github.io/blog/blog/posts/2020-12-04-kedro-pipeline.html</guid>
  <pubDate>Fri, 04 Dec 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/kedro_viz.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Hong Kong Elevation map with rayshader (with R)</title>
  <link>https://noklam.github.io/blog/blog/posts/2020-11-14-hong-kong-elevation-map-with-rayshader.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>This blog is mainly reproducing the blog with different data https://www.tylermw.com/a-step-by-step-guide-to-making-3d-maps-with-satellite-imagery-in-r/. My impression is that R is doing so much better for graph compare to Python. (<code>ggplot</code> and now <code>rayshader</code> for 3D plots!)</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Two datasets was used for this images. Landset for RGB * LC08_L1TP_122044_20200218_20200225_01_T1.TIF</p>
<p>SRTM 30M resolution elevation map * n21e113.hgt * n21e114.hgt * n22e113.hgt * n22e114.hgt The USGS explorer is a very nice tool to search data.</p>
<p>I actually couldn’t find a Landsat image cover entire hong kong (some western part is missing). Further enhancement is needed for stitching together different images.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<ol type="1">
<li>conda with R Kernel</li>
<li>Jupyter Notebook</li>
<li>fastpages</li>
<li>rayshader</li>
</ol>
<blockquote class="blockquote">
<p>Use conda install even for R Packages, I spend hours to get the environment going back and forth in Windows and Linux</p>
</blockquote>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Library</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(rayshader)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(sp)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(raster)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(scales)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb2-1">elevation1 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N21E113.hgt"</span>)</span>
<span id="cb2-2">elevation2 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N21E114.hgt"</span>)</span>
<span id="cb2-3">elevation3 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N22E113.hgt"</span>)</span>
<span id="cb2-4">elevation4 <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/N22E114.hgt"</span>)</span></code></pre></div>
</div>
<p>Let’s plot the elevation map. The whole image is green-ish because most of the area is ocean, so they are at sea-level. The orange color indicate a higher elevation.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb3-1">hk_elevation <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">merge</span>(elevation1,elevation2, elevation3, elevation4)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">height_shade</span>(<span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_elevation)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">plot_map</span>();</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/elevation_map.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">elevation</figcaption><p></p>
</figure>
</div>
<p>Next, we are going to process the RGB image from Landsat-8 ,The raw jpeg look like this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/raw_jpg.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">raw_jpeg</figcaption><p></p>
</figure>
</div>
<p>Satellite raw images requries some preprocessing, before they look like what we expected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb4-1">hk_r <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B4.TIF"</span>)</span>
<span id="cb4-2">hk_g <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B3.TIF"</span>)</span>
<span id="cb4-3">hk_b <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"../data/rayshader/HongKong/LC08_L1TP_122044_20200218_20200225_01_T1_B2.TIF"</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6">hk_rbg_corrected <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sqrt</span>(raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">stack</span>(hk_r, hk_g, hk_b))</span>
<span id="cb4-7">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plotRGB</span>(hk_rbg_corrected);</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/corrected_rgb.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">raw_corrected</figcaption><p></p>
</figure>
</div>
<p>The image is quite hazzy, which doesn’t look like the jpeg we saw earlier. We need to improve the contrast.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Since the RGB image and elevation map does not use the same coordinate system, we need to do some projections.</span></span>
<span id="cb5-2">hk_elevation_utm <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">projectRaster</span>(hk_elevation, <span class="at" style="color: #657422;">crs =</span> <span class="fu" style="color: #4758AB;">crs</span>(hk_r), <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"bilinear"</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">crs</span>(hk_elevation_utm)</span>
<span id="cb5-4"></span>
<span id="cb5-5">bottom_left <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">y=</span><span class="fl" style="color: #AD0000;">113.888</span>, <span class="at" style="color: #657422;">x=</span><span class="fl" style="color: #AD0000;">22.1365</span>)</span>
<span id="cb5-6">top_right   <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">y=</span><span class="fl" style="color: #AD0000;">114.330</span>, <span class="at" style="color: #657422;">x=</span><span class="fl" style="color: #AD0000;">22.5493</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">extent_latlong <span class="ot" style="color: #003B4F;">=</span> sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">SpatialPoints</span>(<span class="fu" style="color: #4758AB;">rbind</span>(bottom_left, top_right), <span class="at" style="color: #657422;">proj4string=</span>sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">CRS</span>(<span class="st" style="color: #20794D;">"+proj=longlat +ellps=WGS84 +datum=WGS84"</span>))</span>
<span id="cb5-9">extent_utm <span class="ot" style="color: #003B4F;">=</span> sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spTransform</span>(extent_latlong, raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crs</span>(hk_elevation_utm))</span>
<span id="cb5-10"></span>
<span id="cb5-11">e <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">extent</span>(extent_utm)</span>
<span id="cb5-12">e</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>CRS arguments:
 +proj=utm +zone=49 +datum=WGS84 +units=m +no_defs </code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>class      : Extent 
xmin       : 797906.6 
xmax       : 842523 
ymin       : 2450766 
ymax       : 2497449 </code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb8-1">hk_rgb_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_rbg_corrected, e)</span>
<span id="cb8-2">elevation_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_elevation_utm, e)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">names</span>(hk_rgb_cropped) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"r"</span>,<span class="st" style="color: #20794D;">"g"</span>,<span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">hk_r_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>r)</span>
<span id="cb8-7">hk_g_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>g)</span>
<span id="cb8-8">hk_b_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>b)</span>
<span id="cb8-9"></span>
<span id="cb8-10">hkel_matrix <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(elevation_cropped)</span>
<span id="cb8-11"></span>
<span id="cb8-12">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">array</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">dim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">nrow</span>(hk_r_cropped),<span class="fu" style="color: #4758AB;">ncol</span>(hk_r_cropped),<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb8-13"></span>
<span id="cb8-14">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">=</span> hk_r_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Red layer</span></span>
<span id="cb8-15">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">=</span> hk_g_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Blue layer</span></span>
<span id="cb8-16">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #003B4F;">=</span> hk_b_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Green layer</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">aperm</span>(hk_rgb_array, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;">plot_map</span>(hk_rgb_array)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/hazzy_rgb.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">hazzy</figcaption><p></p>
</figure>
</div>
<p>The whole image is bright because we have some dark pixels in the corner. It’s similiar to taking images in a dark room, any light source will become a bright spot.</p>
<p>We can improve this by stretching the intensity. It’s really no different than how you fine tune your images on Instagram.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb9-1">hk_rgb_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_rbg_corrected, e)</span>
<span id="cb9-2">elevation_cropped <span class="ot" style="color: #003B4F;">=</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(hk_elevation_utm, e)</span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># Stretch the images</span></span>
<span id="cb9-4">hk_rgb_cropped <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb9-5">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">stretch</span>(hk_rgb_cropped,</span>
<span id="cb9-6"><span class="at" style="color: #657422;">minq =</span> .<span class="dv" style="color: #AD0000;">01</span>,</span>
<span id="cb9-7"><span class="at" style="color: #657422;">maxq =</span> .<span class="dv" style="color: #AD0000;">999</span>,</span>
<span id="cb9-8">)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;">names</span>(hk_rgb_cropped) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"r"</span>,<span class="st" style="color: #20794D;">"g"</span>,<span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb9-11"></span>
<span id="cb9-12">hk_r_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>r)</span>
<span id="cb9-13">hk_g_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>g)</span>
<span id="cb9-14">hk_b_cropped <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(hk_rgb_cropped<span class="sc" style="color: #5E5E5E;">$</span>b)</span>
<span id="cb9-15"></span>
<span id="cb9-16">hkel_matrix <span class="ot" style="color: #003B4F;">=</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(elevation_cropped)</span>
<span id="cb9-17"></span>
<span id="cb9-18">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">array</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="at" style="color: #657422;">dim=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">nrow</span>(hk_r_cropped),<span class="fu" style="color: #4758AB;">ncol</span>(hk_r_cropped),<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb9-19"></span>
<span id="cb9-20">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">=</span> hk_r_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Red layer</span></span>
<span id="cb9-21">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">=</span> hk_g_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Blue layer</span></span>
<span id="cb9-22">hk_rgb_array[,,<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #003B4F;">=</span> hk_b_cropped<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span> <span class="co" style="color: #5E5E5E;">#Green layer</span></span>
<span id="cb9-23"></span>
<span id="cb9-24">hk_rgb_array <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">aperm</span>(hk_rgb_array, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb9-25">hk_rgb_contrast <span class="ot" style="color: #003B4F;">=</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rescale</span>(hk_rgb_array,<span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb9-26"><span class="fu" style="color: #4758AB;">plot_map</span>(hk_rgb_contrast)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/bright_hk.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bright</figcaption><p></p>
</figure>
</div>
<p>Now we get a much better image</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode R code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">plot_3d</span>(hk_rgb_contrast, hkel_matrix, <span class="at" style="color: #657422;">windowsize =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1100</span>,<span class="dv" style="color: #AD0000;">900</span>), <span class="at" style="color: #657422;">zscale =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">shadowdepth =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb10-2">        <span class="at" style="color: #657422;">zoom=</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">phi=</span><span class="dv" style="color: #AD0000;">45</span>,<span class="at" style="color: #657422;">theta=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">15</span>,<span class="at" style="color: #657422;">fov=</span><span class="dv" style="color: #AD0000;">70</span>, <span class="at" style="color: #657422;">background =</span> <span class="st" style="color: #20794D;">"#F2E1D0"</span>, <span class="at" style="color: #657422;">shadowcolor =</span> <span class="st" style="color: #20794D;">"#523E2B"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">render_scalebar</span>(<span class="at" style="color: #657422;">limits=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">10</span>),<span class="at" style="color: #657422;">label_unit =</span> <span class="st" style="color: #20794D;">"km"</span>,<span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"W"</span>, <span class="at" style="color: #657422;">y=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb10-6">                <span class="at" style="color: #657422;">scale_length =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.33</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb10-7"><span class="fu" style="color: #4758AB;">render_compass</span>(<span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"N"</span>)</span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;">render_snapshot</span>(<span class="at" style="color: #657422;">title_text =</span> <span class="st" style="color: #20794D;">"Hong Kong | Imagery: Landsat 8 | DEM: 30m SRTM"</span>,</span>
<span id="cb10-9">                <span class="at" style="color: #657422;">title_bar_color =</span> <span class="st" style="color: #20794D;">"#000000"</span>, <span class="at" style="color: #657422;">title_color =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">title_bar_alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-10">               <span class="at" style="color: #657422;">clear=</span><span class="cn" style="color: #8f5902;">TRUE</span>, )</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/blog/posts/images/rayshader_img/3d_hk.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">3d</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://noklam.github.io/blog/blog/posts/2020-11-14-hong-kong-elevation-map-with-rayshader.html</guid>
  <pubDate>Sat, 14 Nov 2020 00:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/blog/posts/images/rayshader_img/elevation_map.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Optimizing pandas - Reducing 90% memory footprint - updated version</title>
  <link>https://noklam.github.io/blog/blog/posts/2020-11-10-pandas memory optimization.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="todo" class="level1">
<h1>Todo</h1>
<ul class="task-list">
<li><input type="checkbox" disabled="">TWO options to automatically optimize pandas</li>
</ul>
<p>We can check some basic info about the data with pandas <code>.info()</code> function</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df_gamelogs.info(memory_usage<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'deep'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 171907 entries, 0 to 171906
Columns: 161 entries, date to acquisition_info
dtypes: float64(77), int64(6), object(78)
memory usage: 860.5 MB</code></pre>
</div>
</div>
<p>We can see the data has 171907 rows and 161 columns and 859.4 MB memory. Let’s see how much we can optimize <code>dtype_diet</code>.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">proposed_df <span class="op" style="color: #5E5E5E;">=</span> report_on_dataframe(df_gamelogs, unit<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MB"</span>)</span>
<span id="cb3-2">proposed_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Current dtype</th>
      <th>Proposed dtype</th>
      <th>Current Memory (MB)</th>
      <th>Proposed Memory (MB)</th>
      <th>Ram Usage Improvement (MB)</th>
      <th>Ram Usage Improvement (%)</th>
    </tr>
    <tr>
      <th>Column</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>date</th>
      <td>int64</td>
      <td>int32</td>
      <td>671.574219</td>
      <td>335.818359</td>
      <td>335.755859</td>
      <td>49.995347</td>
    </tr>
    <tr>
      <th>number_of_game</th>
      <td>int64</td>
      <td>int8</td>
      <td>671.574219</td>
      <td>84.001465</td>
      <td>587.572754</td>
      <td>87.491857</td>
    </tr>
    <tr>
      <th>day_of_week</th>
      <td>object</td>
      <td>category</td>
      <td>5036.400391</td>
      <td>84.362793</td>
      <td>4952.037598</td>
      <td>98.324939</td>
    </tr>
    <tr>
      <th>v_name</th>
      <td>object</td>
      <td>category</td>
      <td>5036.400391</td>
      <td>174.776367</td>
      <td>4861.624023</td>
      <td>96.529736</td>
    </tr>
    <tr>
      <th>v_league</th>
      <td>object</td>
      <td>category</td>
      <td>4952.461426</td>
      <td>84.359375</td>
      <td>4868.102051</td>
      <td>98.296617</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>h_player_9_id</th>
      <td>object</td>
      <td>category</td>
      <td>4955.471680</td>
      <td>412.757324</td>
      <td>4542.714355</td>
      <td>91.670675</td>
    </tr>
    <tr>
      <th>h_player_9_name</th>
      <td>object</td>
      <td>category</td>
      <td>5225.463379</td>
      <td>421.197266</td>
      <td>4804.266113</td>
      <td>91.939523</td>
    </tr>
    <tr>
      <th>h_player_9_def_pos</th>
      <td>float64</td>
      <td>float16</td>
      <td>671.574219</td>
      <td>167.940430</td>
      <td>503.633789</td>
      <td>74.993020</td>
    </tr>
    <tr>
      <th>additional_info</th>
      <td>object</td>
      <td>category</td>
      <td>2714.671875</td>
      <td>190.601074</td>
      <td>2524.070801</td>
      <td>92.978854</td>
    </tr>
    <tr>
      <th>acquisition_info</th>
      <td>object</td>
      <td>category</td>
      <td>4749.209961</td>
      <td>84.070801</td>
      <td>4665.139160</td>
      <td>98.229794</td>
    </tr>
  </tbody>
</table>
<p>161 rows × 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">new_df <span class="op" style="color: #5E5E5E;">=</span> optimize_dtypes(df_gamelogs, proposed_df) <span class="co" style="color: #5E5E5E;"># Avoid Type conversion error from int64 to int 8 with NA</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Original df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>df_gamelogs<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Propsed df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>new_df<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original df memory: 860.500262260437 MB
Propsed df memory: 79.04368686676025 MB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># sell_prices.csv.zip Source data: https://www.kaggle.com/c/m5-forecasting-uncertainty/</span></span>
<span id="cb7-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'../data/sell_prices.csv.zip'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">proposed_df <span class="op" style="color: #5E5E5E;">=</span> report_on_dataframe(df, unit<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MB"</span>)</span>
<span id="cb8-2">new_df <span class="op" style="color: #5E5E5E;">=</span> optimize_dtypes(df, proposed_df) <span class="co" style="color: #5E5E5E;"># Avoid Type conversion error from int64 to int 8 with NA</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Original df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>df_gamelogs<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Propsed df memory: </span><span class="sc" style="color: #5E5E5E;">{</span>new_df<span class="sc" style="color: #5E5E5E;">.</span>memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> MB'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original df memory: 860.500262260437 MB
Propsed df memory: 85.09655094146729 MB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">## hide</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">## collapse-hide</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/blog/posts/2020-11-10-pandas memory optimization.html</guid>
  <pubDate>Tue, 10 Nov 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
